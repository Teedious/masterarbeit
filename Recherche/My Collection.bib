@misc{Tatarchuk2014,
author = {Tatarchuk, Natalya},
title = {{Destiny's Multithreaded Rendering Architecture}},
url = {https://advances.realtimerendering.com/destiny/gdc{\_}2015/Tatarchuk{\_}GDC{\_}2015{\_}{\_}Destiny{\_}Renderer{\_}web.pdf},
urldate = {2021-11-05},
year = {2014}
}
@misc{Jobst2018,
author = {Jobst, Daniel},
file = {:F$\backslash$:/Daten/OneDrive/OTH/Bachelor/I6/VS/VL.pdf:pdf},
title = {{Verteilte Systeme}},
year = {2018}
}
@inproceedings{Michael1996,
abstract = {Drawing ideas from previous authors, we present a new non-blocking concurrent queue algorithm and a new two-lock queue algorithm in which one enqueue and one dequeue can proceed concurrently. Both algorithms are simple, fast, and practical; we were surprised not to find them in the literature. Experiments on a 12-node SGI Challenge multiprocessor indicate that the new non-blocking queue consistently outperforms the best known alternatives; it is the clear algorithm of choice for machines that provide a universal atomic primitive (e.g. compare{\_}and{\_}swap or load{\_}linked/store{\_}conditional). The two-lock concurrent queue outperforms a single lock when several processes are competing simultaneously for access; it appears to be the algorithm of choice for busy queues on machines with non-universal atomic primitives (e.g. test{\_}and{\_}set). Since much of the motivation for non-blocking algorithms is rooted in their immunity to large, unpredictable delays in process execution, we report experimental results both for systems with dedicated processors and for systems with several processes multiprogrammed on each processor.},
author = {Michael, Maged M and Scott, Michael L},
booktitle = {Proceedings of the Annual ACM Symposium on Principles of Distributed Computing},
doi = {10.1145/248052.248106},
file = {:C$\backslash$:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Michael, Scott - Unknown - Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms.pdf:pdf},
keywords = {compare and swap,concurrent queue,lock-free,multiprogramming,non-blocking},
pages = {267--275},
title = {{Simple, fast, and practical non-blocking and blocking concurrent queue algorithms}},
year = {1996}
}
@article{Hoare1978,
abstract = {This paper suggests that input and output are basic primitives of programming and that parallel composition of communicating sequential processes is a fundamental program structuring method. When combined with a development of Dijkstra's guarded command, these concepts are surprisingly versatile. Their use is illustrated by sample solutions of a variety of familiar programming exercises.},
author = {Hoare, C A R},
file = {:C$\backslash$:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hoare - 1978 - Communicating Sequential Processes.pdf:pdf},
journal = {Communications of the ACM},
number = {9},
title = {{Communicating Sequential Processes}},
volume = {21},
year = {1978}
}
@book{Herrtwich1989,
author = {Herrtwich, Ralf Guido and Hommel, G{\"{u}}nter},
doi = {10.1007/978-3-642-97851-7},
isbn = {3-540-51701-4},
publisher = {Springer-Verlag},
series = {Studienreihe Informatik},
title = {{Kooperation und Konkurrenz : Nebenl{\"{a}}ufige, verteilte und echtzeitabh{\"{a}}ngige Programmsysteme}},
url = {http://link.springer.com/10.1007/978-3-642-97851-7},
year = {1989}
}
@article{Herlihy1991,
author = {Herlihy, Maurice},
file = {:C$\backslash$:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Herlihy - 1991 - Wait-Free Synchronization.pdf:pdf},
journal = {ACM Transactions on Programming Languages and Systems},
month = {jan},
number = {1},
title = {{Wait-Free Synchronization}},
url = {https://cs.brown.edu/{~}mph/Herlihy91/p124-herlihy.pdf},
volume = {11},
year = {1991}
}
@book{Bengel2014,
author = {Bengel, G{\"{u}}nther},
edition = {4},
file = {:C$\backslash$:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bengel - 2014 - Grundkurs Verteilte Systeme.pdf:pdf},
title = {{Grundkurs Verteilte Systeme}},
year = {2014}
}
@misc{Marlowe,
author = {Marlowe, Simon},
keywords = {online},
mendeley-tags = {online},
title = {{Parallelism /= Concurrency}},
url = {https://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/},
urldate = {2021-11-02}
}
@misc{Harper2011,
author = {Harper, Robert},
keywords = {online},
mendeley-tags = {online},
title = {{Parallelism Is Not Concurrency}},
url = {https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/},
urldate = {2021-11-02},
year = {2011}
}
@misc{Pike2012,
author = {Pike, Rob},
keywords = {online},
mendeley-tags = {online},
title = {{Concurrency is not Parallelism}},
url = {https://talks.golang.org/2012/waza.slide},
urldate = {2021-11-02},
year = {2012}
}
@book{Hettel2016,
author = {Hettel, Jörg and Tran, Manh Tien},
isbn = {978-3-86490-369-4},
publisher = {dpunkt.verlag},
title = {{Nebenläufige Programmierung mit Java : Konzepte und Programmiermodelle für Multicore-Systeme}},
year = {2016}
}
@book{Friesen2015,
abstract = {This concise book empowers all Java developers to master the complexity of the Java thread APIs and concurrency utilities. This knowledge aids the Java developer in writing correct and complex performing multithreaded applications. Java's thread APIs and concurrency utilities are among its most powerful and challenging APIs and language features. Java beginners typically find it very difficult to use these features to write correct multithreaded applications. Threads and the Concurrency Utilities helps all Java developers master and use these capabilities effectively. This book is divided into two parts of four chapters each. Part 1 focuses on the Thread APIs and Part 2 focuses on the concurrency utilities. In Part 1, you learn about Thread API basics and runnables, synchronization and volatility, waiting and notification, and the additional capabilities of thread groups, thread local variables, and the Timer Framework. In Part 2, you learn about concurrency utilities basics and executors, synchronizers, the Locking Framework, and the additional capabilities of concurrent collections, atomic variables, and the Fork/Join Framework. Each chapter ends with select exercises designed to challenge your grasp of the chapter's content. An appendix provides the answers to these exercises. A second appendix explores how threads are used by various standard class library APIs. Specifically, you learn about threads in the contexts of Swing, JavaFX, and Java 8's Streams API. What You Will Learn • How to do thread runnables, synchronization, volatility, waiting and notification, thread groups, thread local variables, and the Timer Framework • How to create multithreaded applications that work correctly. • What are concurrency utilities basics and executors • What are synchronizers, the Locking Framework, concurrent collections, atomic variables, and the Fork/Join Framework and how to use them • How to leverage the concurrency utilities to write more complex multithreaded applications and achieve greater performance • How to apply thread usage in Swing, JavaFX, and Java 8 Streams API contexts Audience The primary audience is Java beginners and the secondary audience is more advanced Java developers who have worked with the Thread APIs and the Concurrency Utilities. ** From the Back Cover Threads and the Concurrency Utilities helps all Java developers master the complexity of Java's Thread APIs and Java's Concurrency Utilities. This knowledge aids the Java developer in writing correct and performant multithreaded applications. Everything you want to know about Java's support for threads and concurrency in one place. Chapter exercises designed to reinforce chapter content and help the reader retain knowledge. Lambdas, the try-with-resources statement, and other modern language features are present. Standard Class Library use of threads in Swing, JavaFX, and Java 8 Streams API contexts explained. The author Jeff Friesen is an accomplished Java expert, JavaWorld columnist, books author and much more.},
author = {Friesen, Jeff},
doi = {10.1007/978-1-4842-1700-9},
file = {:C$\backslash$:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Friesen - 2015 - Java Threads and the Concurrency Utilities.pdf:pdf},
isbn = {9781484216996},
title = {{Java Threads and the Concurrency Utilities}},
year = {2015}
}
