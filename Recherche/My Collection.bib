@misc{TheKhronosGroup,
author = {{The Khronos Group}},
keywords = {online},
mendeley-tags = {online},
title = {{OpenGL}},
url = {https://www.khronos.org/opengl/},
urldate = {2022-04-13}
}
@misc{Mojang,
author = {Mojang},
keywords = {online},
mendeley-tags = {online},
title = {{Minecraft}},
url = {https://www.minecraft.net/},
urldate = {2022-04-13}
}
@misc{EpicGamesInc.,
author = {{Epic Games Inc.}},
keywords = {online},
mendeley-tags = {online},
title = {{Unreal Engine 5}},
url = {https://www.unrealengine.com/en-US/unreal-engine-5},
urldate = {2022-04-13}
}
@misc{Java7DocAtomic,
author = {{Oracle Corporation}},
keywords = {online},
mendeley-tags = {online},
title = {{Package java.util.concurrent.atomic Documentaion}},
url = {https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html},
urldate = {2022-03-15}
}
@misc{Marlowe,
author = {Marlowe, Simon},
keywords = {online},
mendeley-tags = {online},
title = {{Parallelism /= Concurrency}},
url = {https://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/},
urldate = {2021-11-02}
}
@manual{Java7Spec17,
author = {{Oracle Corporation}},
keywords = {online},
mendeley-tags = {online},
title = {{Java Language Specification: Chapter 17. Threads and Locks}},
url = {https://docs.oracle.com/javase/specs/jls/se7/html/jls-17.html#jls-17.7},
urldate = {2022-03-15}
}
@misc{YourKitGmbH,
author = {{YourKit GmbH}},
keywords = {online},
mendeley-tags = {online},
title = {{YourKit Java Profiler}},
url = {https://www.yourkit.com/java/profiler},
urldate = {2022-04-01}
}
@article{Hoare1978,
abstract = {This paper suggests that input and output are basic primitives of programming and that parallel composition of communicating sequential processes is a fundamental program structuring method. When combined with a development of Dijkstra's guarded command, these concepts are surprisingly versatile. Their use is illustrated by sample solutions of a variety of familiar programming exercises.},
author = {Hoare, C A R},
file = {:C\:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Hoare - 1978 - Communicating Sequential Processes.pdf:pdf},
journal = {Communications of the ACM},
number = {9},
title = {{Communicating Sequential Processes}},
volume = {21},
year = {1978}
}
@book{Herrtwich1989,
author = {Herrtwich, Ralf Guido and Hommel, G{\"{u}}nter},
doi = {10.1007/978-3-642-97851-7},
isbn = {3-540-51701-4},
publisher = {Springer},
series = {Studienreihe Informatik},
title = {{Kooperation und Konkurrenz: Nebenl{\"{a}}ufige, verteilte und echtzeitabh{\"{a}}ngige Programmsysteme}},
year = {1989}
}
@article{Murata1989,
abstract = {This is an invited tutorial-review paper on Petri nets-a graphical and mathematical modeling tool. Petri nets are a promising tool for describing and studying information processing systems that are characterized as being concurrent, asynchronous, distributed, parallel, nondeterministic, and/or stochastic. The paper starts with a brief review of the history and the application areas considered in the literature. It then proceeds with introductory modeling examples, behavioral and structural properties, three methods of analysis, subclasses of Petri nets and their analysis. In particular, one section is devoted to marked graphs- the concurrent system model most amenable to analysis. In addition, the paper presents introductory discussions on stochastic nets with their application to performance modeling, and on highlevel nets with their application to logic programming. Also included are recent results on reachability criteria. Suggestions are provided for further reading on many subject areas of Petri nets. {\textcopyright} 1989 IEEE},
author = {Murata, Tadao},
doi = {10.1109/5.24143},
file = {:F\:/Daten/OneDrive/OTH/Master/MI4/Masterarbeit/Recherche/murata1989.pdf:pdf},
issn = {15582256},
journal = {Proceedings of the IEEE},
number = {4},
pages = {541--580},
title = {{Petri Nets: Properties, Analysis and Applications}},
volume = {77},
year = {1989}
}
@article{Goel1990,
author = {Goel, Amrit L and Mansouri, Nashat},
file = {:C\:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Goel, Mansouri - 1990 - A Petri Net-Based Tool for Detecting Deadlocks and Race A Petri Net-Based Tool for Detecting Deadlocks and Race.pdf:pdf},
journal = {Electrical Engineering and Computer Science - Technical Reports},
title = {{A Petri Net-Based Tool for Detecting Deadlocks and Race Conditions in Concurrent Programs}},
url = {https://surface.syr.edu/eecs_techreports/86},
volume = {86},
year = {1990}
}
@article{Herlihy1991,
author = {Herlihy, Maurice},
file = {:C\:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Herlihy - 1991 - Wait-Free Synchronization.pdf:pdf},
journal = {ACM Transactions on Programming Languages and Systems},
number = {1},
title = {{Wait-Free Synchronization}},
url = {https://cs.brown.edu/$\sim$mph/Herlihy91/p124-herlihy.pdf},
volume = {11},
year = {1991}
}
@inproceedings{Michael1996,
abstract = {Drawing ideas from previous authors, we present a new non-blocking concurrent queue algorithm and a new two-lock queue algorithm in which one enqueue and one dequeue can proceed concurrently. Both algorithms are simple, fast, and practical; we were surprised not to find them in the literature. Experiments on a 12-node SGI Challenge multiprocessor indicate that the new non-blocking queue consistently outperforms the best known alternatives; it is the clear algorithm of choice for machines that provide a universal atomic primitive (e.g. compare_and_swap or load_linked/store_conditional). The two-lock concurrent queue outperforms a single lock when several processes are competing simultaneously for access; it appears to be the algorithm of choice for busy queues on machines with non-universal atomic primitives (e.g. test_and_set). Since much of the motivation for non-blocking algorithms is rooted in their immunity to large, unpredictable delays in process execution, we report experimental results both for systems with dedicated processors and for systems with several processes multiprogrammed on each processor.},
author = {Michael, Maged M and Scott, Michael L},
booktitle = {Proceedings of the Annual ACM Symposium on Principles of Distributed Computing},
doi = {10.1145/248052.248106},
file = {:C\:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Michael, Scott - Unknown - Simple, Fast, and Practical Non-Blocking and Blocking Concurrent Queue Algorithms.pdf:pdf},
keywords = {compare and swap,concurrent queue,lock-free,multiprogramming,non-blocking},
pages = {267--275},
title = {{Simple, fast, and practical non-blocking and blocking concurrent queue algorithms}},
year = {1996}
}
@misc{Davies2006,
author = {Davies, Leigh},
file = {:C\:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Davies - 2006 - Practical examples of multi-threading in games.pdf:pdf},
keywords = {online},
mendeley-tags = {online},
title = {{Practical examples of multi-threading in games}},
url = {https://developer.amd.com/wordpress/media/2012/10/07 Intel Practical Multithreading.pdf},
urldate = {2022-03-03},
year = {2006}
}
@book{Rauber2006,
author = {Rauber, Thomas and R{\"{u}}nger, Gundula},
file = {:F\:/Daten/OneDrive/Bibliothek/B{\"{u}}cher/Informatik/Rauber-R{\"{u}}nger2007_Book_ParalleleProgrammierung.pdf:pdf},
isbn = {978-3-540-46549-2},
publisher = {Springer},
title = {{Parallele Programmierung}},
year = {2006}
}
@misc{Harper2011,
author = {Harper, Robert},
keywords = {online},
mendeley-tags = {online},
title = {{Parallelism Is Not Concurrency}},
url = {https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/},
urldate = {2021-11-02},
year = {2011}
}
@book{Seemann2012,
author = {Seemann, Mark},
isbn = {978-1-935182-50-4},
publisher = {Manning},
title = {{Dependency Injection in .NET}},
year = {2012}
}
@misc{Pike2012,
author = {Pike, Rob},
keywords = {online},
mendeley-tags = {online},
title = {{Concurrency is not Parallelism}},
url = {https://talks.golang.org/2012/waza.slide},
urldate = {2021-11-02},
year = {2012}
}
@misc{Tatarchuk2014,
author = {Tatarchuk, Natalya},
keywords = {online},
mendeley-tags = {online},
title = {{Destiny's Multithreaded Rendering Architecture}},
url = {https://advances.realtimerendering.com/destiny/gdc_2015/Tatarchuk_GDC_2015__Destiny_Renderer_web.pdf},
urldate = {2021-11-05},
year = {2014}
}
@book{Chacon2014,
author = {Chacon, Scott and Straub, Ben},
isbn = {978-1-4842-0077-3},
publisher = {Apress},
title = {{Pro Git}},
url = {https://git-scm.com/book/en/v2},
year = {2014}
}
@book{Bengel2014,
author = {Bengel, G{\"{u}}nther},
edition = {4},
file = {:C\:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Bengel - 2014 - Grundkurs Verteilte Systeme.pdf:pdf},
title = {{Grundkurs Verteilte Systeme}},
year = {2014}
}
@misc{Gyrling2015,
author = {Gyrling, Christian},
keywords = {online},
mendeley-tags = {online},
title = {{Parallelizing the Naughty Dog Engine Using Fibers}},
url = {https://www.gdcvault.com/play/1022186/Parallelizing-the-Naughty-Dog-Engine},
urldate = {2022-03-10},
year = {2015}
}
@book{Nystrom2015,
author = {Nystrom, Robert},
file = {:F\:/Daten/OneDrive/Bibliothek/B{\"{u}}cher/Informatik/Design Patterns f{\"{u}}r die Spieleprogrammierung.pdf:pdf},
isbn = {978-3-95845-090-5},
publisher = {mitp},
title = {{Design Patterns f{\"{u}}r die Spieleprogrammierung}},
year = {2015}
}
@book{Friesen2015,
abstract = {This concise book empowers all Java developers to master the complexity of the Java thread APIs and concurrency utilities. This knowledge aids the Java developer in writing correct and complex performing multithreaded applications. Java's thread APIs and concurrency utilities are among its most powerful and challenging APIs and language features. Java beginners typically find it very difficult to use these features to write correct multithreaded applications. Threads and the Concurrency Utilities helps all Java developers master and use these capabilities effectively. This book is divided into two parts of four chapters each. Part 1 focuses on the Thread APIs and Part 2 focuses on the concurrency utilities. In Part 1, you learn about Thread API basics and runnables, synchronization and volatility, waiting and notification, and the additional capabilities of thread groups, thread local variables, and the Timer Framework. In Part 2, you learn about concurrency utilities basics and executors, synchronizers, the Locking Framework, and the additional capabilities of concurrent collections, atomic variables, and the Fork/Join Framework. Each chapter ends with select exercises designed to challenge your grasp of the chapter's content. An appendix provides the answers to these exercises. A second appendix explores how threads are used by various standard class library APIs. Specifically, you learn about threads in the contexts of Swing, JavaFX, and Java 8's Streams API. What You Will Learn • How to do thread runnables, synchronization, volatility, waiting and notification, thread groups, thread local variables, and the Timer Framework • How to create multithreaded applications that work correctly. • What are concurrency utilities basics and executors • What are synchronizers, the Locking Framework, concurrent collections, atomic variables, and the Fork/Join Framework and how to use them • How to leverage the concurrency utilities to write more complex multithreaded applications and achieve greater performance • How to apply thread usage in Swing, JavaFX, and Java 8 Streams API contexts Audience The primary audience is Java beginners and the secondary audience is more advanced Java developers who have worked with the Thread APIs and the Concurrency Utilities. ** From the Back Cover Threads and the Concurrency Utilities helps all Java developers master the complexity of Java's Thread APIs and Java's Concurrency Utilities. This knowledge aids the Java developer in writing correct and performant multithreaded applications. Everything you want to know about Java's support for threads and concurrency in one place. Chapter exercises designed to reinforce chapter content and help the reader retain knowledge. Lambdas, the try-with-resources statement, and other modern language features are present. Standard Class Library use of threads in Swing, JavaFX, and Java 8 Streams API contexts explained. The author Jeff Friesen is an accomplished Java expert, JavaWorld columnist, books author and much more.},
author = {Friesen, Jeff},
doi = {10.1007/978-1-4842-1700-9},
file = {:C\:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Friesen - 2015 - Java Threads and the Concurrency Utilities.pdf:pdf},
isbn = {978-1-4842-1699-6},
publisher = {Apress},
title = {{Java Threads and the Concurrency Utilities}},
year = {2015}
}
@misc{Genova2015,
author = {Genova, Barry},
keywords = {online},
mendeley-tags = {online},
title = {{Multithreading the Entire Destiny Engine}},
url = {https://www.gdcvault.com/play/1022164/Multithreading-the-Entire-Destiny},
urldate = {2022-03-04},
year = {2015}
}
@misc{Hodgman2016,
author = {Hodgman, Brook},
keywords = {online},
mendeley-tags = {online},
title = {{Parallel Game Engine Design}},
url = {https://www.youtube.com/watch?v=JpmK0zu4Mts},
urldate = {2022-03-04},
year = {2016}
}
@book{Hettel2016,
author = {Hettel, Jörg and Tran, Manh Tien},
isbn = {978-3-86490-369-4},
publisher = {dpunkt.verlag},
title = {{Nebenläufige Programmierung mit Java: Konzepte und Programmiermodelle für Multicore-Systeme}},
year = {2016}
}
@book{Gamma2016,
author = {Gamma, Erich and Helm, Richard and Johnson, Ralph and Vlissides, John},
isbn = {9780201633610},
publisher = {Addison-Wesley},
title = {{Design patterns: Elements of Reusable Object-Oriented Software}},
year = {2016}
}
@misc{Schott2016,
author = {Schott, Mathias},
keywords = {online},
mendeley-tags = {online},
title = {{Vulkan Multi-Threading}},
url = {https://developer.nvidia.com/sites/default/files/akamai/gameworks/blog/munich/mschott_vulkan_multi_threading.pdf},
urldate = {2022-03-09},
year = {2016}
}
@book{Tanenbaum2016,
author = {Tanenbaum, Andrew S and Bos, Herbert},
isbn = {9783868942705},
keywords = {Android,Betriebssysteme,Linux,Unix,Windows},
publisher = {Pearson Deutschland},
title = {{Moderne Betriebssysteme}},
url = {https://elibrary.pearson.de/book/99.150005/9783863267667},
year = {2016}
}
@unpublished{Zink2016,
author = {Zink, Tobias},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Erstellung einer w{\"{u}}rfelbasierten 3D-Grafikbibliothek mit Java \& OpenGL}},
year = {2016}
}
@book{Martin17,
author = {Martin, Robert C},
isbn = {978-0-13-449416-6},
publisher = {Prentice Hall},
series = {Robert C. Martin Series},
title = {{Clean Architecture: A Craftsman's Guide to Software Structure and Design}},
year = {2017}
}
@unpublished{Beer2017,
author = {Beer, Daniel},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Prozedurale Weltengenerierung und Inhaltsverwaltung f{\"{u}}r ein bestehendes 3D-Framework}},
year = {2017}
}
@unpublished{Amthor2017,
author = {Amthor, Florian},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Design, Implementierung und Integration einer NPC-KI in ein bestehendes 3D-Framework}},
year = {2017}
}
@misc{White2018,
author = {White, Steve and Coulter, David and Batchelor, Drew and Jacobs, Mike and Satran, Michael},
keywords = {online},
mendeley-tags = {online},
title = {{Introduction to Multithreading in Direct3D 11}},
url = {https://docs.microsoft.com/en-us/windows/win32/direct3d11/overviews-direct3d-11-render-multi-thread-intro},
urldate = {2022-03-08},
year = {2018}
}
@unpublished{Ebbinger2018,
author = {Ebbinger, Marc},
file = {:F\:/Daten/OneDrive/OTH/Master/MI4/Masterarbeit/Recherche/RaceConditions/20180309-BA-BeleuchtungsmodelleSchatten_Marc_Ebbinger.pdf:pdf},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Implementierung von Beleuchtungsmodellen in einem bestehenden 3D-Framework}},
year = {2018}
}
@article{Thoman2018,
abstract = {Task-based programming models for shared memory-such as Cilk Plus and OpenMP 3-are well established and documented. However, with the increase in parallel, many-core, and heterogeneous systems, a number of research-driven projects have developed more diversified task-based support, employing various programming and runtime features. Unfortunately, despite the fact that dozens of different task-based systems exist today and are actively used for parallel and high-performance computing (HPC), no comprehensive overview or classification of task-based technologies for HPC exists. In this paper, we provide an initial task-focused taxonomy for HPC technologies , which covers both programming interfaces and runtime mechanisms. We A taxonomy of task-based technologies for HPC 1423 demonstrate the usefulness of our taxonomy by classifying state-of-the-art task-based environments in use today.},
author = {Thoman, Peter and Dichev, Kiril and Heller, Thomas and Iakymchuk, Roman and Aguilar, Xavier and Hasanov, Khalid and Gschwandtner, Philipp and Lemarinier, Pierre and Markidis, Stefano and Jordan, Herbert and Fahringer, Thomas and Katrinis, Kostas and Laure, Erwin and Nikolopoulos, Dimitrios S},
doi = {10.1007/s11227-018-2238-4},
file = {:C\:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Thoman et al. - 2018 - A taxonomy of task-based parallel programming technologies for high-performance computing.pdf:pdf},
journal = {The Journal of Supercomputing},
keywords = {API,Fault tolerance,High-performance computing,Monitoring framework,Runtime system,Scheduler,Task-based parallelism,Taxonomy},
pages = {1422--1434},
title = {{A taxonomy of task-based parallel programming technologies for high-performance computing}},
url = {https://doi.org/10.1007/s11227-018-2238-4},
volume = {74},
year = {2018}
}
@unpublished{Helgert2018,
author = {Helgert, Andr{\'{e}}},
file = {:F\:/Daten/OneDrive/OTH/Master/MI4/Masterarbeit/Recherche/20180901-BA-AlgorithmenFuerDieLehre_Andre_Helgert.pdf:pdf},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Implementierung einer Komponente zur Visualisierung und automatischen Uberpr u ¨ fung von Algorithmen aus der Lehre unter Verwendung eines bestehenden Bachelorarbeit}},
year = {2018}
}
@unpublished{Ebbinger2018a,
author = {Ebbinger, Chris},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Prozedurale Generierung von architektonischen Strukturen f{\"{u}}r ein bestehendes 3D-Framework}},
year = {2018}
}
@unpublished{Kalle2018,
author = {Kalle, Sven},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Implementation of environmental features into an existing 3D-Framework}},
year = {2018}
}
@unpublished{Weidner2018,
author = {Weidner, Christoph},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Erweiterung von NPC-Verhalten in einem bestehenden 3D-Framework}},
year = {2018}
}
@unpublished{Werner2018,
author = {Werner, Tobias},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Evaluierung und Umsetzung moderner Rendertechniken in einem voxelbasierten 3D-Framework}},
year = {2018}
}
@book{Maurer2019,
author = {Maurer, Christian},
booktitle = {Nichtsequentielle und Verteilte Programmierung mit Go},
doi = {10.1007/978-3-658-26290-7},
edition = {4},
file = {:C\:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Maurer - 2019 - Nichtsequentielle und Verteilte Programmierung mit Go Synchronisation nebenl{\"{a}}ufiger Prozesse Kommunikation -- Kooperati.pdf:pdf},
isbn = {978-3-658-26290-7},
publisher = {Springer},
title = {{Nichtsequentielle und Verteilte Programmierung mit Go}},
year = {2019}
}
@book{Vries2020,
author = {de Vries, Joey},
file = {:F\:/Daten/OneDrive/Bibliothek/B{\"{u}}cher/Informatik/learnopengl.pdf:pdf},
isbn = {978-90-90-33256-7},
publisher = {Kendall \& Welling},
title = {{Learn OpenGL - Graphics Programming}},
url = {learnopengl.com},
year = {2020}
}
@misc{Venkatesan2020,
author = {Venkatesan, Vasudha},
month = {mar},
title = {{Why You Should Use Constructor Injection in Spring}},
url = {https://reflectoring.io/constructor-injection/},
urldate = {2022-02-07},
year = {2020}
}
@article{Kharitonov2020,
abstract = {The article describes an approach to detecting race conditions with respect to a variable in a program, based on the automatic construction of a program model in terms of Petri nets. A simple sample program having race condition is given and the analysis of its behavior shows four different results of execution due to the race condition. Compositional model of the program in terms of Petri nets is presented that illustrates the process of automatic model generation. Notions of program control flow, global area and environment models are introduced. Reduction rules for the control flow model are defined and compositional representation of reduced program model is described. The formula for detection of race conditions is defined as: for a race conditions to occur, it is necessary that between the moment a variable is read by a thread and the moment this thread writes to a variable, an event of writing to the variable by another thread may occur. Compositional model of global variable capable of intercepting writing to variable events that lead to race condition is presented. By synchronizing the program control flow model with the global variable model it is possible to detect race conditions by building the reachability tree and checking for the presence of error event in it.},
author = {Kharitonov, D. I. and Odyakova, D. S.},
doi = {10.1088/1757-899X/734/1/012030},
file = {:C\:/Users/Florian/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kharitonov, Odyakova - 2020 - Modelling race conditions in multithreading programs in terms of Petri nets.pdf:pdf},
issn = {1757899X},
journal = {IOP Conference Series: Materials Science and Engineering},
month = {jan},
number = {1},
publisher = {Institute of Physics Publishing},
title = {{Modelling race conditions in multithreading programs in terms of Petri nets}},
url = {https://www.researchgate.net/publication/338899901_Modelling_race_conditions_in_multithreading_programs_in_terms_of_Petri_nets},
volume = {734},
year = {2020}
}
@unpublished{Sellner2020,
author = {Sellner, Julian},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Implementierung prozeduraler Generierung von Flora, Landschaften und H{\"{o}}hlen in einem bestehenden 3D-Framework}},
year = {2020}
}
@misc{Main2021,
author = {Main, Jeremy},
keywords = {online},
mendeley-tags = {online},
title = {{GPUProfiler}},
url = {https://github.com/JeremyMain/GPUProfiler},
urldate = {2022-04-08},
year = {2021}
}
@unpublished{Kohler2021,
author = {K{\"{o}}hler, Jesper and Loy, Michael and Brandl, Korbinian},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Prozedurale Generierung und Crafting}},
year = {2021}
}
@unpublished{Bunke2021,
author = {Bunke, Achim},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Integration eines KI-Verhaltensframeworks in eine bestehende 3D-Bibliothek}},
year = {2021}
}
@unpublished{Mayer2021,
author = {Mayer, Florian and Zaporowski, Mateuz and Amesberger, Manuel and Neudert, Raphael},
institution = {Ostbayerische Technische Hochschule Regensburg},
keywords = {online},
mendeley-tags = {online},
title = {{Einbindung von Machine Learning-gest{\"{u}}tzter k{\"{u}}nstlicher Intelligenz in das blocklib-Framework}},
year = {2021}
}
