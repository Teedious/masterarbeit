<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>Parallelism Is Not Concurrency | Existential Type</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="pingback" href="https://existentialtype.wordpress.com/xmlrpc.php" />
<script type="text/javascript">
  WebFontConfig = {"google":{"families":["PT+Sans:b:latin,latin-ext","PT+Sans:r,i,b,bi:latin,latin-ext"]}};
  (function() {
    var wf = document.createElement('script');
    wf.src = 'https://s0.wp.com/wp-content/plugins/custom-fonts/js/webfont.js';
    wf.type = 'text/javascript';
    wf.async = 'true';
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(wf, s);
	})();
</script><style id="jetpack-custom-fonts-css">.wf-active #header h1{font-family:"PT Sans",sans-serif;font-size:5.2em;font-style:normal;font-weight:700}.wf-active body{font-family:"PT Sans",sans-serif}.wf-active #topbar, .wf-active #topbar a{font-family:"PT Sans",sans-serif}.wf-active #pagebar a{font-family:"PT Sans",sans-serif}.wf-active .entry{font-family:"PT Sans",sans-serif}.wf-active small{font-family:"PT Sans",sans-serif}.wf-active small.cats{font-family:"PT Sans",sans-serif}.wf-active .description{font-family:"PT Sans",sans-serif}.wf-active #commentform input, .wf-active #commentform textarea, .wf-active .commentlist li{font-family:"PT Sans",sans-serif}.wf-active p.about{font-family:"PT Sans",sans-serif}.wf-active #commentform p{font-family:"PT Sans",sans-serif}.wf-active #sidebar{font-family:"PT Sans",sans-serif}.wf-active #wp-calendar caption{font-family:"PT Sans",sans-serif}.wf-active h1, .wf-active h2, .wf-active h3{font-family:"PT Sans",sans-serif;font-weight:700;font-style:normal}.wf-active h2{font-size:2.34em;font-style:normal;font-weight:700}.wf-active h2.pagetitle{font-size:2.08em;font-style:normal;font-weight:700}.wf-active #sidebar h2{font-family:"PT Sans",sans-serif;font-weight:700;font-size:1.3em;font-style:normal}.wf-active h3{font-size:1.69em;font-style:normal;font-weight:700}.wf-active #wp-calendar th{font-style:normal;font-weight:700}</style>
<meta name='robots' content='noindex, nofollow' />
<meta name="google-site-verification" content="9_ALkwwtCsKQi94y8XasEUNYfT4LA6qFjdl2mNL2cgw" />
<link rel='dns-prefetch' href='//s0.wp.com' />
<link rel='dns-prefetch' href='//wordpress.com' />
<link rel="alternate" type="application/rss+xml" title="Existential Type &raquo; Feed" href="https://existentialtype.wordpress.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="Existential Type &raquo; Comments Feed" href="https://existentialtype.wordpress.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="Existential Type &raquo; Parallelism Is Not&nbsp;Concurrency Comments Feed" href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/feed/" />
	<script type="text/javascript">
		/* <![CDATA[ */
		function addLoadEvent(func) {
			var oldonload = window.onload;
			if (typeof window.onload != 'function') {
				window.onload = func;
			} else {
				window.onload = function () {
					oldonload();
					func();
				}
			}
		}
		/* ]]> */
	</script>
			<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s0.wp.com\/wp-content\/mu-plugins\/wpcom-smileys\/twemoji\/2\/72x72\/","ext":".png","svgUrl":"https:\/\/s0.wp.com\/wp-content\/mu-plugins\/wpcom-smileys\/twemoji\/2\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/s0.wp.com\/wp-includes\/js\/wp-emoji-release.min.js?m=1625065786h&ver=5.8.1"}};
			!function(e,a,t){var n,r,o,i=a.createElement("canvas"),p=i.getContext&&i.getContext("2d");function s(e,t){var a=String.fromCharCode;p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,e),0,0);e=i.toDataURL();return p.clearRect(0,0,i.width,i.height),p.fillText(a.apply(this,t),0,0),e===i.toDataURL()}function c(e){var t=a.createElement("script");t.src=e,t.defer=t.type="text/javascript",a.getElementsByTagName("head")[0].appendChild(t)}for(o=Array("flag","emoji"),t.supports={everything:!0,everythingExceptFlag:!0},r=0;r<o.length;r++)t.supports[o[r]]=function(e){if(!p||!p.fillText)return!1;switch(p.textBaseline="top",p.font="600 32px Arial",e){case"flag":return s([127987,65039,8205,9895,65039],[127987,65039,8203,9895,65039])?!1:!s([55356,56826,55356,56819],[55356,56826,8203,55356,56819])&&!s([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]);case"emoji":return!s([10084,65039,8205,55357,56613],[10084,65039,8203,55357,56613])}return!1}(o[r]),t.supports.everything=t.supports.everything&&t.supports[o[r]],"flag"!==o[r]&&(t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&t.supports[o[r]]);t.supports.everythingExceptFlag=t.supports.everythingExceptFlag&&!t.supports.flag,t.DOMReady=!1,t.readyCallback=function(){t.DOMReady=!0},t.supports.everything||(n=function(){t.readyCallback()},a.addEventListener?(a.addEventListener("DOMContentLoaded",n,!1),e.addEventListener("load",n,!1)):(e.attachEvent("onload",n),a.attachEvent("onreadystatechange",function(){"complete"===a.readyState&&t.readyCallback()})),(n=t.source||{}).concatemoji?c(n.concatemoji):n.wpemoji&&n.twemoji&&(c(n.twemoji),c(n.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='all-css-0-1' href='https://s0.wp.com/_static/??-eJyNkd1OwzAMhV+I1FRUGzeIZ8mPF7wlqZU4THl70iJQ2djgJtKJ/dlHx3BmZeckmARiVRyqp1QgY9CCTvFc5EINtpQH+B0LdMICRxTW9qRWda+d0oESSQN5w9hBrgbWtshyxX1BvnZpMPteyQjv4zjshxFMpeDAhHldbLLODYq0gN+DKNlQ3eKvQERHGkPfujjaCA66YVYBvbZtiJT+xnttq39At82vTjdZ6TZXUT6Tu7D97xFZCyVfbuCb2Jfc+n9kfW3+DnbmzihjOGMpqr+RalSfp1u41/gy7p6mcdo/Ts/HD9kb4oE=?cssminify=yes' type='text/css' media='all' />
<style id='wp-block-library-inline-css'>
.has-text-align-justify {
	text-align:justify;
}
</style>
<style id='global-styles-inline-css'>
body{--wp--preset--color--black: #000000;--wp--preset--color--cyan-bluish-gray: #abb8c3;--wp--preset--color--white: #ffffff;--wp--preset--color--pale-pink: #f78da7;--wp--preset--color--vivid-red: #cf2e2e;--wp--preset--color--luminous-vivid-orange: #ff6900;--wp--preset--color--luminous-vivid-amber: #fcb900;--wp--preset--color--light-green-cyan: #7bdcb5;--wp--preset--color--vivid-green-cyan: #00d084;--wp--preset--color--pale-cyan-blue: #8ed1fc;--wp--preset--color--vivid-cyan-blue: #0693e3;--wp--preset--color--vivid-purple: #9b51e0;--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%);--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%);--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%);--wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%);--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%);--wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%);--wp--preset--gradient--blush-light-purple: linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%);--wp--preset--gradient--blush-bordeaux: linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%);--wp--preset--gradient--luminous-dusk: linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%);--wp--preset--gradient--pale-ocean: linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%);--wp--preset--gradient--electric-grass: linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%);--wp--preset--gradient--midnight: linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%);--wp--preset--duotone--dark-grayscale: url('#wp-duotone-dark-grayscale');--wp--preset--duotone--grayscale: url('#wp-duotone-grayscale');--wp--preset--duotone--purple-yellow: url('#wp-duotone-purple-yellow');--wp--preset--duotone--blue-red: url('#wp-duotone-blue-red');--wp--preset--duotone--midnight: url('#wp-duotone-midnight');--wp--preset--duotone--magenta-yellow: url('#wp-duotone-magenta-yellow');--wp--preset--duotone--purple-green: url('#wp-duotone-purple-green');--wp--preset--duotone--blue-orange: url('#wp-duotone-blue-orange');--wp--preset--font-size--small: 13px;--wp--preset--font-size--normal: 16px;--wp--preset--font-size--medium: 20px;--wp--preset--font-size--large: 36px;--wp--preset--font-size--huge: 42px;}.has-black-color{color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-color{color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-color{color: var(--wp--preset--color--white) !important;}.has-pale-pink-color{color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-color{color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-color{color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-color{color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-color{color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-color{color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-color{color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-color{color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-color{color: var(--wp--preset--color--vivid-purple) !important;}.has-black-background-color{background-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-background-color{background-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-background-color{background-color: var(--wp--preset--color--white) !important;}.has-pale-pink-background-color{background-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-background-color{background-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-background-color{background-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-background-color{background-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-background-color{background-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-background-color{background-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-background-color{background-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-background-color{background-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-background-color{background-color: var(--wp--preset--color--vivid-purple) !important;}.has-black-border-color{border-color: var(--wp--preset--color--black) !important;}.has-cyan-bluish-gray-border-color{border-color: var(--wp--preset--color--cyan-bluish-gray) !important;}.has-white-border-color{border-color: var(--wp--preset--color--white) !important;}.has-pale-pink-border-color{border-color: var(--wp--preset--color--pale-pink) !important;}.has-vivid-red-border-color{border-color: var(--wp--preset--color--vivid-red) !important;}.has-luminous-vivid-orange-border-color{border-color: var(--wp--preset--color--luminous-vivid-orange) !important;}.has-luminous-vivid-amber-border-color{border-color: var(--wp--preset--color--luminous-vivid-amber) !important;}.has-light-green-cyan-border-color{border-color: var(--wp--preset--color--light-green-cyan) !important;}.has-vivid-green-cyan-border-color{border-color: var(--wp--preset--color--vivid-green-cyan) !important;}.has-pale-cyan-blue-border-color{border-color: var(--wp--preset--color--pale-cyan-blue) !important;}.has-vivid-cyan-blue-border-color{border-color: var(--wp--preset--color--vivid-cyan-blue) !important;}.has-vivid-purple-border-color{border-color: var(--wp--preset--color--vivid-purple) !important;}.has-vivid-cyan-blue-to-vivid-purple-gradient-background{background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;}.has-light-green-cyan-to-vivid-green-cyan-gradient-background{background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;}.has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;}.has-luminous-vivid-orange-to-vivid-red-gradient-background{background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;}.has-very-light-gray-to-cyan-bluish-gray-gradient-background{background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;}.has-cool-to-warm-spectrum-gradient-background{background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;}.has-blush-light-purple-gradient-background{background: var(--wp--preset--gradient--blush-light-purple) !important;}.has-blush-bordeaux-gradient-background{background: var(--wp--preset--gradient--blush-bordeaux) !important;}.has-luminous-dusk-gradient-background{background: var(--wp--preset--gradient--luminous-dusk) !important;}.has-pale-ocean-gradient-background{background: var(--wp--preset--gradient--pale-ocean) !important;}.has-electric-grass-gradient-background{background: var(--wp--preset--gradient--electric-grass) !important;}.has-midnight-gradient-background{background: var(--wp--preset--gradient--midnight) !important;}.has-small-font-size{font-size: var(--wp--preset--font-size--small) !important;}.has-normal-font-size{font-size: var(--wp--preset--font-size--normal) !important;}.has-medium-font-size{font-size: var(--wp--preset--font-size--medium) !important;}.has-large-font-size{font-size: var(--wp--preset--font-size--large) !important;}.has-huge-font-size{font-size: var(--wp--preset--font-size--huge) !important;}
</style>
<link rel='stylesheet' id='all-css-2-1' href='https://s0.wp.com/_static/??-eJyFj+EKwjAMhF/IGidM5g/xWboZa1zblDVl+PZmE3Qq6L+7S74LgTGZjqNgFAjFJF8cxQwdh6CR8dSjuvyRrDVZAUFkIaXzUzwGi065YNCGVFqYo5AEstw8fm0uro90cigZsOiUe0Lj7QgT7K1o298Ch2w8d1aI45sxZ29p+IUO2Hp2Kt389stO0DEcqnq/qXb1tmmud011dk0=?cssminify=yes' type='text/css' media='all' />
<link rel='stylesheet' id='print-css-3-1' href='https://s0.wp.com/wp-content/mu-plugins/global-print/global-print.css?m=1465851035h&cssminify=yes' type='text/css' media='print' />
<style id='jetpack-global-styles-frontend-style-inline-css'>
:root { --font-headings: unset; --font-base: unset; --font-headings-default: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif; --font-base-default: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;}
</style>
<link rel='stylesheet' id='all-css-6-1' href='https://s0.wp.com/_static/??-eJxti8sKgCAQAH8o297RIfoWE1NjdaVV+v3o0CHqNAzMwBmFopB0SOCziJiNCwyROIkNpTuArTxcMA9LxVzA/8WknESBZOgtnylZ7TWD7cAgrRLvYPFzPbT12PRTX+0XZRA3zg==?cssminify=yes' type='text/css' media='all' />
<script id='jetpack_related-posts-js-extra'>
var related_posts_js_options = {"post_heading":"h4"};
</script>
<script id='wpcom-actionbar-placeholder-js-extra'>
var actionbardata = {"siteID":"2157150","siteName":"Existential Type","siteURL":"http:\/\/existentialtype.wordpress.com","siteHost":"existentialtype.wordpress.com","icon":"<img alt='' src='https:\/\/secure.gravatar.com\/blavatar\/4192ff5d4a07fc7f4fa2a2ff285af64e?s=50&d=https%3A%2F%2Fs0.wp.com%2Fi%2Flogo%2Fwpcom-gray-white.png' class='avatar avatar-50' height='50' width='50' \/>","canManageOptions":"","canCustomizeSite":"","isFollowing":"","themeSlug":"pub\/contempt","signupURL":"https:\/\/wordpress.com\/start\/","loginURL":"https:\/\/wordpress.com\/log-in?redirect_to=https%3A%2F%2Fexistentialtype.wordpress.com%2F2011%2F03%2F17%2Fparallelism-is-not-concurrency%2F&signup_flow=account","themeURL":"","xhrURL":"https:\/\/existentialtype.wordpress.com\/wp-admin\/admin-ajax.php","nonce":"06ff0bf30f","isSingular":"1","isFolded":"","isLoggedIn":"","isMobile":"","subscribeNonce":"<input type=\"hidden\" id=\"_wpnonce\" name=\"_wpnonce\" value=\"f1b451b277\" \/>","referer":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/","canFollow":"1","feedID":"228739","statusMessage":"","subsEmailDefault":"instantly","customizeLink":"https:\/\/existentialtype.wordpress.com\/wp-admin\/customize.php?url=https%3A%2F%2Fexistentialtype.wordpress.com%2F2011%2F03%2F17%2Fparallelism-is-not-concurrency%2F","postID":"50","shortlink":"https:\/\/wp.me\/p93aK-O","canEditPost":"","editLink":"https:\/\/wordpress.com\/post\/existentialtype.wordpress.com\/50","statsLink":"https:\/\/wordpress.com\/stats\/post\/50\/existentialtype.wordpress.com","i18n":{"view":"View site","follow":"Follow","following":"Following","edit":"Edit","login":"Log in","signup":"Sign up","customize":"Customize","report":"Report this content","themeInfo":"Get theme: Contempt","shortlink":"Copy shortlink","copied":"Copied","followedText":"New posts from this site will now appear in your <a href=\"https:\/\/wordpress.com\/read\">Reader<\/a>","foldBar":"Collapse this bar","unfoldBar":"Expand this bar","editSubs":"Manage subscriptions","viewReader":"View site in Reader","viewReadPost":"View post in Reader","subscribe":"Sign me up","enterEmail":"Enter your email address","followers":"Join 306 other followers","alreadyUser":"Already have a WordPress.com account? <a href=\"https:\/\/wordpress.com\/log-in?redirect_to=https%3A%2F%2Fexistentialtype.wordpress.com%2F2011%2F03%2F17%2Fparallelism-is-not-concurrency%2F&signup_flow=account\">Log in now.<\/a>","stats":"Stats","notifyNewPosts":"Notify me of new posts","notifyNewPostsDetails":"Receive web and mobile notifications for new posts from this site.","emailNewPosts":"Email me new posts","emailNewPostsDetails":"You can customize your notification settings further <a href=\"https:\/\/wordpress.com\/following\/manage?s=existentialtype.wordpress.com\">here<\/a>.","emailNewComments":"Email me new comments","instantly":"Instantly","daily":"Daily","weekly":"Weekly"}};
</script>
<script crossorigin='anonymous' type='text/javascript' src='https://s0.wp.com/_static/??-eJyFjlEKwjAMQC9kVotMv8SzzC2OljatScrc7e1QYQ7BrxDeyyNmytAnUiQ1XkxOohFFuhEbLzvzTWO6uoBQBLkKpODolrZeLJBDGR2JYQyd4gBLdbN9rhz1oQwoS97fC/L8Hk109FeC6Eau0bW8+peDQub0mH+wKfcpvigw1ppotS7xbI8He9q31rb+CSjcafo='></script>
<script type='text/javascript'>
	window.addEventListener( 'DOMContentLoaded', function() {
		rltInitialize( {"token":null,"iframeOrigins":["https:\/\/widgets.wp.com"]} );
	} );
</script>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://existentialtype.wordpress.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://s0.wp.com/wp-includes/wlwmanifest.xml" /> 
<meta name="generator" content="WordPress.com" />
<link rel="canonical" href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/" />
<link rel='shortlink' href='https://wp.me/p93aK-O' />

<!-- Jetpack Open Graph Tags -->
<meta property="og:type" content="article" />
<meta property="og:title" content="Parallelism Is Not Concurrency" />
<meta property="og:url" content="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/" />
<meta property="og:description" content="In an earlier post I mentioned that one goal of the new introductory curriculum at Carnegie Mellon is to teach parallelism as the general case of computing, rather than an esoteric, specialized sub…" />
<meta property="article:published_time" content="2011-03-18T01:32:23+00:00" />
<meta property="article:modified_time" content="2015-04-06T23:08:46+00:00" />
<meta property="og:site_name" content="Existential Type" />
<meta property="og:image" content="https://secure.gravatar.com/blavatar/4192ff5d4a07fc7f4fa2a2ff285af64e?s=200&#038;ts=1635851204" />
<meta property="og:image:width" content="200" />
<meta property="og:image:height" content="200" />
<meta property="og:locale" content="en_US" />
<meta name="twitter:site" content="@wordpressdotcom" />
<meta name="twitter:text:title" content="Parallelism Is Not&nbsp;Concurrency" />
<meta name="twitter:image" content="https://secure.gravatar.com/blavatar/4192ff5d4a07fc7f4fa2a2ff285af64e?s=240" />
<meta name="twitter:card" content="summary" />
<meta property="fb:app_id" content="249643311490" />
<meta property="article:publisher" content="https://www.facebook.com/WordPresscom" />

<!-- End Jetpack Open Graph Tags -->
<link rel="shortcut icon" type="image/x-icon" href="https://secure.gravatar.com/blavatar/4192ff5d4a07fc7f4fa2a2ff285af64e?s=32" sizes="16x16" />
<link rel="icon" type="image/x-icon" href="https://secure.gravatar.com/blavatar/4192ff5d4a07fc7f4fa2a2ff285af64e?s=32" sizes="16x16" />
<link rel="apple-touch-icon" href="https://secure.gravatar.com/blavatar/4192ff5d4a07fc7f4fa2a2ff285af64e?s=114" />
<link rel='openid.server' href='https://existentialtype.wordpress.com/?openidserver=1' />
<link rel='openid.delegate' href='https://existentialtype.wordpress.com/' />
<link rel="search" type="application/opensearchdescription+xml" href="https://existentialtype.wordpress.com/osd.xml" title="Existential Type" />
<link rel="search" type="application/opensearchdescription+xml" href="https://s1.wp.com/opensearch.xml" title="WordPress.com" />
<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>		<style type="text/css">
			.recentcomments a {
				display: inline !important;
				padding: 0 !important;
				margin: 0 !important;
			}

			table.recentcommentsavatartop img.avatar, table.recentcommentsavatarend img.avatar {
				border: 0px;
				margin: 0;
			}

			table.recentcommentsavatartop a, table.recentcommentsavatarend a {
				border: 0px !important;
				background-color: transparent !important;
			}

			td.recentcommentsavatarend, td.recentcommentsavatartop {
				padding: 0px 0px 1px 0px;
				margin: 0px;
			}

			td.recentcommentstextend {
				border: none !important;
				padding: 0px 0px 2px 10px;
			}

			.rtl td.recentcommentstextend {
				padding: 0px 10px 2px 0px;
			}

			td.recentcommentstexttop {
				border: none;
				padding: 0px 0px 0px 10px;
			}

			.rtl td.recentcommentstexttop {
				padding: 0px 10px 0px 0px;
			}
		</style>
		<meta name="application-name" content="Existential Type" /><meta name="msapplication-window" content="width=device-width;height=device-height" /><meta name="msapplication-task" content="name=Subscribe;action-uri=https://existentialtype.wordpress.com/feed/;icon-uri=https://secure.gravatar.com/blavatar/4192ff5d4a07fc7f4fa2a2ff285af64e?s=16" /><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=https://s0.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=https://s0.wp.com/i/favicon.ico" /><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=https://s0.wp.com/i/favicon.ico" /><meta name="description" content="In an earlier post I mentioned that one goal of the new introductory curriculum at Carnegie Mellon is to teach parallelism as the general case of computing, rather than an esoteric, specialized subject for advanced students.  Many people are incredulous when I tell them this, because it immediately conjures in their mind the myriad complexities&hellip;" />
<style type="text/css">
#headerimg{
	background: url(https://s0.wp.com/wp-content/themes/pub/contempt/images/blue_flower/head.jpg) no-repeat;
}
#header h1 a, .description {
	color:#e5f2e9;
}
</style>
</head>
<body class="post-template-default single single-post postid-50 single-format-standard customizer-styles-applied highlander-enabled highlander-light">

<div id="page">

<div id="header">
	<div id="headerimg" onclick="location.href='https://existentialtype.wordpress.com';" style="cursor: pointer;">
		<h1><a href="https://existentialtype.wordpress.com/">Existential Type</a></h1>
		<div class="description"></div>
	</div>
</div>

<ul id="pagebar" class="menu"><li id="menu-item-980" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-980"><a href="https://existentialtype.wordpress.com/">Home</a></li>
<li id="menu-item-981" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-981"><a href="https://existentialtype.wordpress.com/about/">About</a></li>
<li id="menu-item-982" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-982"><a href="http://www.cs.cmu.edu/~rwh">Home Page</a></li>
<li id="menu-item-983" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-983"><a href="https://existentialtype.wordpress.com/category/research/">Research</a></li>
<li id="menu-item-984" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-984"><a href="https://existentialtype.wordpress.com/category/teaching-2/">Teaching</a></li>
<li id="menu-item-985" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-985"><a href="https://existentialtype.wordpress.com/category/programming/">Programming</a></li>
</ul>
<div id="grad" style="height: 65px; width: 100%; background: url(https://s0.wp.com/wp-content/themes/pub/contempt/images/blue_flower/topgrad.jpg);">&nbsp;</div>

	<div id="content" class="widecolumn">

  


		<div class="post-50 post type-post status-publish format-standard hentry category-programming category-teaching-2 tag-concurrency tag-parallelism" id="post-50">
			<h2>Parallelism Is Not&nbsp;Concurrency</h2>

			<div class="entry">
				<div class="cs-rating pd-rating" id="pd_rating_holder_4111818_post_50"></div><br/><p>In an <a title="Teaching FP to freshmen" href="https://existentialtype.wordpress.com/2011/03/15/teaching-fp-to-freshmen/">earlier post</a> I mentioned that one goal of the new introductory curriculum at Carnegie Mellon is to teach parallelism as the general case of computing, rather than an esoteric, specialized subject for advanced students.  Many people are incredulous when I tell them this, because it immediately conjures in their mind the myriad complexities of concurrency: locks, monitors, deadlock, dining philosophers, &#8230;.  And if you look at the recent research literature, you will see countless papers of the form (a) parallelism is important, so (b) let&#8217;s talk about concurrency.  The situation has gotten so bad that I think that most computer scientists cannot distinguish the two concepts.  (Or maybe they willfully confuse the two so as to justify funding for work on concurrency by appealing to the importance of parallelism.)</p>
<p>Given this state of affairs, I cannot explain what we are doing at Carnegie Mellon (to anyone who doesn&#8217;t already know) without first rebooting you.  Trust me, I&#8217;m just going to hit Ctrl-Alt-Delete, and then click Restart.  OK, we&#8217;re back.</p>
<p>The first thing to understand is <em>parallelism has nothing to do with concurrency</em>.  Concurrency is concerned with <em>nondeterministic composition</em> of programs (or their components).  Parallelism is concerned with <em>asymptotic efficiency</em> of programs with <em>deterministic</em> behavior.  Concurrency is all about managing the unmanageable: events arrive for reasons beyond our control, and we must respond to them.  A user clicks a mouse, the window manager must respond, even though the display is demanding attention.  Such situations are inherently nondeterministic, but we also employ <em>pro forma</em> nondeterminism in a deterministic setting by pretending that components signal events in an arbitrary order, and that we must respond to them as they arise.  Nondeterministic composition is a powerful program structuring idea.  Parallelism, on the other hand, is all about <em>dependencies</em> among the subcomputations of a deterministic computation.  The result is not in doubt, but there are many means of achieving it, some more efficient than others.  We wish to exploit those opportunities to our advantage.</p>
<p>Now I can hear you object, but isn&#8217;t concurrency <em>required</em> to implement parallelism?  Well, yes, it is, but concurrency is also required to implement sequentiality too!  The timing signal on your processor chip is essentially a synchronization mechanism with which to coordinate the otherwise independent activity of the components of the processor.  (Yes, I know that there are asynchronous processors, but this only makes my point stronger, you still need to control the concurrency.)  The point is that concurrency is not <em>relevant</em> to parallelism, even if the engineers who build our parallel computing platforms must deal with concurrency.  Another way to say the same thing is that parallelism is a useful <em>abstraction</em>, and abstractions should never be confused with their <em>implementations</em>.  (Numbers are not certain sets, but they can be implemented in terms of sets.  And so on.)</p>
<p>All well and good, parallelism is not concurrency, but what <em>is</em> it?  What is an appropriate <em>model</em> for parallel computation?  <a title="Languages and Machines" href="https://existentialtype.wordpress.com/2011/03/16/languages-and-machines/">As in the sequential case</a>, there are two answers, a <em>machine-based</em> approach and a <em>language-based </em>approach.  I am going to criticize the machine-based formulation, and argue for the language-based formulation on two grounds: (a) it is inherently more elegant and natural, and (b) it can be taught directly to students without any fuss or bother.  Much of what I have to say is derived from the seminal and beautiful work of Guy Blelloch, which I have absorbed over years of collaboration.  To the extent I&#8217;ve gotten it right, give Guy the credit; to the extent that I&#8217;ve gotten it wrong, assign me the blame.</p>
<p>The canonical machine-based model is the <em>PRAM</em>, or <em>parallel RAM</em>, which generalizes the classical RAM model to allow <em>p</em>&gt;0 processors that share a common memory.  There are many variations on the PRAM, according to what sorts of interactions are allowed and how conflicts are resolved among the processors.  This is not important for present purposes, so I will not attempt to categorize the variations here.  The key idea is that the number, <em>p</em>, of processors is fixed in advance&#8212;results are stated in terms of how efficiently an algorithm executes on a <em>p</em>-processor PRAM as a function of the size, <em>n</em>, of the input.  This is well and good as a <em>cost model</em> for parallel execution, but it <em>totally sucks</em> as a programming model!  To write code for a PRAM, you fix the number of processors, and write the code for that number of processors (often the various cases are &#8220;analogous&#8221;, but in reality you must fix <em>p</em> and write code for that fixed <em>p</em>).  Moreover, you must (officially, anyway) write low-level imperative RAM code, which introduces <em>spurious dependencies</em> among sub-computations by <em>explicitly scheduling </em>the steps of the computation.  This is horrendous!  Of course typically one writes pidgin C, and sketches how it is compiled, but the fact is you&#8217;re still writing sequential, imperative code to implement a parallel algorithm.</p>
<p>As I&#8217;ve argued <a title="Languages and Machines" href="https://existentialtype.wordpress.com/2011/03/16/languages-and-machines/">previously</a>, what is needed is a <em>language-based</em> model of computation in which we assign costs to the steps of the program we actually write, not the one it (allegedly) compiles into.  Moreover, in the parallel setting we wish to think in terms of <em>dependencies</em> among computations, rather than the exact order in which they are to be executed.  This allows us to factor out the properties of the target platform, such as the number, <em>p</em>, of processing units available, and instead write the program in an <em>intrinsically parallel</em> manner, and let the compiler and run-time system (that is, the semantics of the language) sort out how to schedule it onto a parallel fabric.  Here&#8217;s a useful analogy.  Just as abstract languages allow us to think in terms of data structures such as trees or lists as forms of value and not bother about how to &#8220;schedule&#8221; the data structure into a sequence of words in memory, so a parallel language should allow us to think in terms of the dependencies among the phases of a large computation and not bother about how to schedule the workload onto processors.  Storage management is to abstract values as scheduling is to deterministic parallelism.</p>
<p>The paradigmatic example is provided by Quicksort, a naturally parallel algorithm.  Many people think that the &#8220;big idea&#8221; of Quicksort is the in-place swapping technique that Hoare invented in the original formulation.  I argue that this is a detail; the &#8220;big idea&#8221; is that it is parallelizable.  To see this, we must work at a reasonable level of abstraction: a sort function permutes a non-empty sequence of (comparable) elements to obtain another sequence in sorted order.</p>
<blockquote><p><strong>fun qs xs = if |xs|=1 then xs else let val (xsl, xsg) = split xs in concat (qs xsl, qs xsg)</strong></p></blockquote>
<p>That is, we split the sequence into two parts (by some means) such that everything in the left part is less than everything in the right part, then sort the parts independently (in parallel!), and merge the results together.  The exact complexity of Quicksort depends on the representation of sequences, and the complexity of the operations on them.  For now, let us just gloss over this to focus on the overall structure of the computation.  If we can ensure that the sequence is split roughly in half (by any of a number of means, including randomization), then the recursion is of <em>logarithmic depth</em>.  At each stage we do linear work, but the recursive calls are <em>independent</em> of one another.  The algorithm has a natural <em>fork-join</em> structure in which we (a) split the sequence into two parts, (b) in parallel sort the two parts, and (c) join the results together.  (The splitting itself can be done in parallel as well, but we&#8217;ll not bother about that here.)</p>
<p>Analysis of Quicksort splits into two parts, the <em>work</em> and the <em>depth</em> (or <em>span</em>).  The work is the overall number of steps required to perform the algorithm.  On a sequence of length <em>n</em>, we perform<em> O(n log n)</em> steps to sort the sequence, as might have been expected.  This is the <em>sequential complexity</em>, the amount of time it would take to run on a single processor.  To account for parallelism, there is a second measure, called the <em>depth</em>, that measures the <em>critical path length</em> of the computation, the length of the longest chain of dependencies among subcomputation.  No matter how much parallelism we may have available, we can never run faster than the depth; it represents the <em>idealized parallel complexity</em> of the algorithm, the amount of time it would take given any number of processors.  Depending on the choice of data structures, the depth of Quicksort is <em>O(log^2 n)</em>, or thereabouts, which makes it quite parallelizable.  (Note that, as in our earlier discussion, a step of computation is a transition step in the operational semantics of the language we are using to express the algorithm.)</p>
<p>This is very nice and elegant, but now comes the really beautiful part, the concept of a <em>provable implementation </em>of the language.  (The word &#8220;provable&#8221; is only needed here because of the shabby state of the field; having a proof that your implementation works, and how well it works, remains an oddity to be emphasized, rather than an expectation to be fulfilled by any self-respecting computer scientist.)  The idea is that the language-based model can be implemented on a PRAM (with stated interconnect properties that I will suppress here) with a <em>provable bound</em> on the cost that takes account of the overhead of scheduling onto a <em>p</em>-processor fabric.  Thus, <em>p</em> need not be specified in advance, but is rather determined by the run-time system and compiler, which are provided by the proof of the theorem.</p>
<p><strong>Theorem</strong> A computation with work <em>w</em> and depth <em>d</em> can be implemented in a <em>p</em>-processor PRAM in time <em>O(max(w/p, d))</em>.</p>
<p>(Sometimes the second factor is <em>d log p</em>, depending on the assumptions we are making about the target PRAM.)</p>
<p>This is called <em>Brent&#8217;s Principle</em>, and it states a fairly obvious fact.  First, we can never execute a depth <em>d</em> program in fewer than <em>d</em> steps.  The depth is the critical path length; this is the amount of time we <em>must</em> wait to execute the algorithm, regardless of any available parallelism.  Second, to the extent that parallelism arises from the dependency (rather, indepedency) structure of the computation, we can at best do <em>p </em>units of work at time, keeping all processors warm, until we are done.  And that&#8217;s it!</p>
<p>The effectiveness of the language-based model of parallelism lies <em>entirely</em> in its ability to expose the dependency structure of the computation by not introducing any dependencies that are not forced on us by the nature of the computation itself.  And the key to this is <em>functional programming</em>, which manifests itself here in the <em>transformational</em> approach to computation: sorting is conceived of as a <em>mathematical function</em> that transforms a given sequence into another sequence.  It does not destroy the given sequence any more than adding two numbers destroys those numbers!  Since Quicksort is a mathematical function, we need not worry that execution of <strong>qs xsl <span style="font-weight:normal;">interferes with (depends on) </span>qs xsg</strong>; we can readily run them in parallel without fear of untoward consequences.  The payoff is that there are <em>many fewer</em> dependencies among the subcomputations, and hence <em>many more </em>opportunities for parallelism that can be exploited, in accord with Brent&#8217;s Principle, when scheduling the work onto a parallel fabric.</p>
<p>The upshot of all this is that <em>functional programming is of paramount importance for parallelism</em>.  That&#8217;s (one reason) why we are teaching functional programming to freshmen at Carnegie Mellon.  And it&#8217;s the main reason why we are able to.  There&#8217;s nothing to it, just program like you do math, and the parallelism will take care of itself!</p>
<p><em>Update: </em>Simon Marlowe made <a title="Parallelism and Concurrency" href="http://ghcmutterings.wordpress.com/2009/10/06/parallelism-concurrency/" target="_blank">similar points </a>to mine some time ago.</p>
<div id="jp-post-flair" class="sharedaddy sd-rating-enabled sd-like-enabled sd-sharing-enabled"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-email"><a rel="nofollow noopener noreferrer" data-shared="" class="share-email sd-button share-icon" href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?share=email" target="_blank" title="Click to email this to a friend"><span>Email</span></a></li><li class="share-print"><a rel="nofollow noopener noreferrer" data-shared="" class="share-print sd-button share-icon" href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#print" target="_blank" title="Click to print"><span>Print</span></a></li><li class="share-facebook"><a rel="nofollow noopener noreferrer" data-shared="sharing-facebook-50" class="share-facebook sd-button share-icon" href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?share=facebook" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-reddit"><a rel="nofollow noopener noreferrer" data-shared="" class="share-reddit sd-button share-icon" href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li><li class="share-twitter"><a rel="nofollow noopener noreferrer" data-shared="sharing-twitter-50" class="share-twitter sd-button share-icon" href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li><a href="#" class="sharing-anchor sd-button share-more"><span>More</span></a></li><li class="share-end"></li></ul><div class="sharing-hidden"><div class="inner" style="display: none;"><ul><li class="share-tumblr"><a rel="nofollow noopener noreferrer" data-shared="" class="share-tumblr sd-button share-icon" href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?share=tumblr" target="_blank" title="Click to share on Tumblr"><span>Tumblr</span></a></li><li class="share-linkedin"><a rel="nofollow noopener noreferrer" data-shared="sharing-linkedin-50" class="share-linkedin sd-button share-icon" href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li><li class="share-end"></li><li class="share-end"></li></ul></div></div></div></div></div><div class='sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded' id='like-post-wrapper-2157150-50-61811bc48fbe0' data-src='//widgets.wp.com/likes/index.html?ver=20210831#blog_id=2157150&amp;post_id=50&amp;origin=existentialtype.wordpress.com&amp;obj_id=2157150-50-61811bc48fbe0' data-name='like-post-frame-2157150-50-61811bc48fbe0' data-title='Like or Reblog'><h3 class='sd-title'>Like this:</h3><div class='likes-widget-placeholder post-likes-widget-placeholder' style='height: 55px;'><span class='button'><span>Like</span></span> <span class="loading">Loading...</span></div><span class='sd-text-color'></span><a class='sd-link-color'></a></div>
<div id='jp-relatedposts' class='jp-relatedposts' >
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
</div></div>
				
				<p class="postmetadata alt">
					<small>
					This entry was posted  on Thursday, March 17th, 2011 at 9:32 pm and is filed under <a href="https://existentialtype.wordpress.com/category/programming/" rel="category tag">Programming</a>, <a href="https://existentialtype.wordpress.com/category/teaching-2/" rel="category tag">Teaching</a>.					You can follow any responses to this entry through the <a href='https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/feed/'>RSS 2.0</a> feed.
											Both comments and pings are currently closed.
					
					</small>
				</p>

				<nav id="nav-below">
					<h3 class="assistive-text">Post navigation</h3>
					<span class="nav-previous"><a href="https://existentialtype.wordpress.com/2011/03/16/languages-and-machines/" rel="prev">&laquo; Previous Post</a></span>
					<span class="nav-next"><a href="https://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/" rel="next">Next Post &raquo;</a></span>
				</nav><!-- #nav-below -->

			</div>
		</div>

	<div id="comments">


<h3 id="comments-title">56 Responses to <em>Parallelism Is Not&nbsp;Concurrency</em></h3>


<ol class="commentlist">
			<li class="pingback even thread-even depth-1 highlander-comment" id="comment-3437">
				<div id="div-comment-3437" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.aboromedia.com/ai/2017/04/29/visualizing-concurrency-in-go-%c2%b7-divans-blog/' rel='external nofollow ugc' class='url'>Visualizing Concurrency in Go · divan&#8217;s blog | Artificia Intelligence</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-3437">April 28, 2017 at 9:36 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_3437"></div><p>[&#8230;] last thing I want to illustrate is a difference between parallelism and concurrency. This topic is well covered, and there is a great talk by Rob Pike on the subject. One of the #mustwatch videos, [&#8230;]</p>
<p id="comment-like-3437" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=3437&#038;_wpnonce=d3f3db9248" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-3437" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-3202">
				<div id="div-comment-3202" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://postd.cc/go_concurrency_visualize/' rel='external nofollow ugc' class='url'>Go言語の並行性を映像化する | プログラミング | POSTD</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-3202">February 29, 2016 at 4:30 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_3202"></div><p>[&#8230;] 最後に見せたいのは、並列化と並行性の違いです。これについては頻繁に議論の対象となっています。Rob Pikeによる素晴らしいプレゼンがあるので、ぜひ見てください。#mustwatch（必見）ビデオの1つです。 [&#8230;]</p>
<p id="comment-like-3202" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=3202&#038;_wpnonce=e215fd5465" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-3202" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-3157">
				<div id="div-comment-3157" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.explodingads.com/nvader-comments-on-a-parable-about-concurrency-demonstrated-with-comical-cartoons/' rel='external nofollow ugc' class='url'>nvader comments on &quot;A parable about concurrency (demonstrated with comical cartoons)&quot;</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-3157">February 16, 2016 at 4:13 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_3157"></div><p>[&#8230;] <a href="https://existentialtype.wordpress.com/2011/03/17/parallelism&#038;#8230" rel="nofollow ugc">https://existentialtype.wordpress.com/2011/03/17/parallelism&#038;#8230</a>; [&#8230;]</p>
<p id="comment-like-3157" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=3157&#038;_wpnonce=2da30320c7" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-3157" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-3152">
				<div id="div-comment-3152" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://itfm.pro/%d0%b2%d0%b8%d0%b7%d1%83%d0%b0%d0%bb%d0%b8%d0%b7%d0%b0%d1%86%d0%b8%d1%8f-concurrency-%d0%b2-go-%d1%81-webgl/' rel='external nofollow ugc' class='url'>Визуализация concurrency в Go с WebGL - itfm.pro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-3152">January 31, 2016 at 8:51 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_3152"></div><p>[&#8230;] объясняющая отличия между concurrency и параллелизмом раскрыта многократно, в том числе и Робом Пайком в [&#8230;]</p>
<p id="comment-like-3152" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=3152&#038;_wpnonce=6333a1ddbf" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-3152" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-3143">
				<div id="div-comment-3143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://askandans.cloverink.com/what-is-functional-declarative-and-imperative-programming-closed/' rel='external nofollow ugc' class='url'>What is functional, declarative and imperative programming? [closed] | ASK AND ANSWER</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-3143">December 28, 2015 at 1:55 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_3143"></div><p>[&#8230;] functional composition with first-class functions can express the depth in the parallelism by separating out the independent [&#8230;]</p>
<p id="comment-like-3143" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=3143&#038;_wpnonce=7256938a49" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-3143" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-hackintoshrao odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-3065">
				<div id="div-comment-3065" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://2.gravatar.com/avatar/ee20c28be7254efecd50ce7a471b4876?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://hackintoshrao.wordpress.com' rel='external nofollow ugc' class='url'>Karthic.Rao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-3065">May 27, 2015 at 1:15 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_3065"></div><p>Reblogged this on <a href="http://hackintoshrao.com/2015/05/27/parallelism-is-not-concurrency/" rel="nofollow">hackintoshrao</a>.</p>
<p id="comment-like-3065" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=3065&#038;_wpnonce=9b89ba590e" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-3065" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-2963">
				<div id="div-comment-2963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://iust.pp.ua/2015/01/07/answer-what-is-functional-declarative-and-imperative-programming-development-solution-fix/' rel='external nofollow ugc' class='url'>Answer: What is functional, declarative and imperative programming? #development #solution #fix | IT Info</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-2963">January 7, 2015 at 10:50 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_2963"></div><p>[&#8230;] functional composition with first-class functions can express the depth in the parallelism by separating out the independent [&#8230;]</p>
<p id="comment-like-2963" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=2963&#038;_wpnonce=33753b2627" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-2963" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-2957">
				<div id="div-comment-2957" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://goodanswer.biz/2014/12/25/fixed-what-is-functional-declarative-and-imperative-programming-dev-it-asnwer/' rel='external nofollow ugc' class='url'>Fixed What is functional, declarative and imperative programming? #dev #it #asnwer | Good Answer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-2957">December 25, 2014 at 1:11 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_2957"></div><p>[&#8230;] functional composition with first-class functions can express the depth in the parallelism by separating out the independent [&#8230;]</p>
<p id="comment-like-2957" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=2957&#038;_wpnonce=729deff9e0" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-2957" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-2943">
				<div id="div-comment-2943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sevennet.org/2014/12/05/how-to-what-is-functional-declarative-and-imperative-programming/' rel='external nofollow ugc' class='url'>How to: What is functional, declarative and imperative programming? | SevenNet</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-2943">December 5, 2014 at 8:55 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_2943"></div><p>[&#8230;] functional composition with first-class functions can express the depth in the parallelism by separating out the independent [&#8230;]</p>
<p id="comment-like-2943" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=2943&#038;_wpnonce=9f4c3fa3f5" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-2943" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-2919">
				<div id="div-comment-2919" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://postd.cc/who-teaches-functional-programming/' rel='external nofollow ugc' class='url'>【翻訳】USトップ大学でも関数型プログラミングが余り教えられていない現実 | POSTD</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-2919">October 28, 2014 at 11:00 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_2919"></div><p>[&#8230;] プログラミング言語の研究者たちが関数型言語を好むのには、十分な理由があります。例えばC言語のような命令型言語の場合、プロシージャのコード1行がプログラム全体に影響を与えてしまうこともありますが、関数型言語の場合はそういった副作用が大幅に制限されるため、正確性や安全性を導くのが容易になります。どういうことかと言うと、AのプロシージャとBのプロシージャの構成の正確性を分析する際には、AとBを分けて個別に分析できる利点があるということです。また研究者たちは、関数型プログラミングによる設計が並列処理の活用を容易にするということも度々論じています。 [&#8230;]</p>
<p id="comment-like-2919" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=2919&#038;_wpnonce=4e97046ef8" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-2919" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="pingback even thread-even depth-1 highlander-comment" id="comment-2810">
				<div id="div-comment-2810" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pl-enthusiast.net/2014/09/02/who-teaches-functional-programming/' rel='external nofollow ugc' class='url'>Who teaches functional programming? | The PL Enthusiast</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-2810">September 2, 2014 at 9:40 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_2810"></div><p>[&#8230;] A and B can be broken down into analyzing A and analyzing B. Researchers have also frequently argued that functional program design makes it fundamentally easier to exploit [&#8230;]</p>
<p id="comment-like-2810" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=2810&#038;_wpnonce=8da50e699c" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-2810" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent highlander-comment" id="comment-1297">
				<div id="div-comment-1297" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://i0.wp.com/lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?resize=32%2C32&#038;ssl=1' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='https://plus.google.com/117470304774655353562' rel='external nofollow ugc' class='url'>Carl Samuelson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1297">April 2, 2014 at 4:45 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1297"></div><p>Thanks for this post. It is powerful to be able to identify and express deterministic algorithms that are side effect free and can be automatically consumed by the compiler or processor and scaled almost as needed. The stumbling block I have is in how concurrent and parallel are defined here. </p>
<p>I was happy to reboot myself and try something new, but when I applied the new ideas the pieces didn&#8217;t seem to fit. Though, I am happy to be enlightened (even if you just list a few links).</p>
<p>If we take a step down the stack from the programming to processing and ultimately to the system we generally understand concurrent and parallel based on time. At the system level, when a person sees a number of bees buzzing around a hive, then tend to think of how they all appear to be doing things at the same time, rather than whether their activity is deterministic or not.</p>
<p>A standard definition (I am sure you come across) for concurrent processing is where computations are executed in overlapping time periods. The definition for parallel is where operations are performed simultaneously. The key differences being &#8216;overlapping time periods&#8217; vs &#8216;simultaneously&#8217;. Where concurrent processing includes all parallel, but parallel does not include all concurrent. </p>
<p>The benefit of this definition is that it is very much how we think of the processing. Two CPU cores can process tasks in parallel (simultaneously). It is also useful to think of examples where concurrent processing is not parallel. An example being a single core that can swap between tasks giving the impression of multiple operations in overlapping time periods (which is how &#8216;things happening at the same time&#8217; was originally achieved). </p>
<p>We are in the business of doing things at the same time and in this post it seems that in the program (or algorithm) the time dimension has been swapped with determinism (I know there is more to it than that, but that seems to be the fundamental part). While I see value in differentiating deterministic programs (see last paragraph), I have a hard time adopting the new definitions applied to concurrent and parallel because: &#8211;</p>
<p>1. It seems less intuitive to consume as a non-expert. It is easy to understand the concept of activities running at the same time and how that relates to concurrency and parallelism, less easy to understand how determinism relates (as an introduction).<br />
2. It seems more difficult to understand the natural evolution from sequential to single-processor multi-tasking to multiple processors purely in terms of determinism.<br />
3. It seems to be a disconnect with the natural time metaphor used for processing and systems to the point that concurrent (non-parallel) programs can run largely in parallel. </p>
<p>So, my questions, if I may be so bold, are: &#8211;<br />
1. How do you continue this determinism/non-determinism metaphor from the algorithm / program level to the processor and system without the confusion that a concurrent program (by the determinism definition) can have multiple threads of execution active and running in parallel (on separate processors) much of the time.<br />
2. How would you describe the evolution of concurrent and parallel systems using the metaphor used in 1.<br />
3. How would you describe a program that provides the illusion of running multiple operation at the same time, but all that it is doing is time-slicing (e.g. swapping between timers).</p>
<p>Please note, I do think that it is valuable to differentiate deterministic side-effect free programs from their badly behaved (but still very useful) non-deterministic lock-ridden counterparts. However, I see that as a refinement of the definition of parallel. This would stop confusion at the grey areas of concurrent vs parallel and elevate this deterministic class of program from mere parallel to &#8216;deterministic parallel&#8217; (or something like that). This would also keep the time metaphor so that non-deterministic programs that are processed largely in parallel could still be considered parallel. By this definition, a concurrent, but non-parallel program would be one that time sliced/swapped to give the impression of multiple tasks happening at the same time (as many Javascript programs do).</p>
<p id="comment-like-1297" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1297&#038;_wpnonce=c279d073ab" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1297" class="comment-like-feedback">Like</span></p>

		
				</div>
				<ul class="children">
		<li class="comment byuser comment-author-robertharper bypostauthor even depth-2 parent highlander-comment" id="comment-1299">
				<div id="div-comment-1299" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1299">April 2, 2014 at 9:53 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1299"></div><p>The short response is to suggest that you read my PFPL.  We are largely in agreement.  In my view concurrency is about non-deterministic composition of programs, and has zero to do with parallelism.  Because of non-determinism, reasoning about such programs requires thinking about all possible choices that can be made among the composed computations.  This is very difficult, as we all know.  It makes no difference whether concurrency is implemented on one processor or a thousand, the crucial point is non-deterministic composition, period.  Parallelism, on the other hand, is all about making full use of computational resources to make your programs run faster.  It&#8217;s all about efficiency, and not at all about correctness or composition.  It just says &#8220;do these two things at once&#8221;, period.  The cost semantics supports asymptotic analysis of how well you are doing, given unbounded parallel resources.  The provable implementation maps that to concrete platforms with specific limitations, such as the number of processors.</p>
<p>An instance of the problem of reasoning about concurrent programs (those built from non-deterministic composition) is that it is very hard or impossible to make precise statements about their computational complexity, in either time or space.  This is the antithesis of parallelism!  The restriction to determinism is to ensure that there is no question of correctness introduced by using parallelism (debug sequentially, run in parallel), and that it is possible to make precise statements about their efficiency.  Combining parallelism with concurrency is deadly for both enterprises, and is not to be recommended.  If only more people understood this fundamental point, lots of wasted effort would not be wasted.</p>
<p>Incidentally, another consequence of non-determinism making it hard to get provable efficiency bounds on programs is that Haskell sucks.  It is nearly impossible to make accurate time or, especially, space predictions about Haskell programs.  That&#8217;s why there&#8217;s so much emphasis on space profiling, as opposed to space analysis.  Why is Haskell non-deterministic?  Because it is lazy, and, as Gilles Kahn, the father of laziness, said many decades ago: laziness is all about concurrency.</p>
<p id="comment-like-1299" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1299&#038;_wpnonce=cf78da54c9" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1299" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 highlander-comment" id="comment-1301">
				<div id="div-comment-1301" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://i0.wp.com/lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?resize=32%2C32&#038;ssl=1' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='https://plus.google.com/117470304774655353562' rel='external nofollow ugc' class='url'>Carl Samuelson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1301">April 3, 2014 at 5:18 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1301"></div><p>As you say, we are largely in agreement, its just the use of the terms that I have difficulty with. </p>
<p>From being in the trenches of multi-threaded programming I quickly learnt that giving up some attempts at parallelism in favour of increased determinism and stability was a wise trade-off given the commonly used programming languages and techniques at the time. Especially when developing a business-critical single-point-of-failure server (as we used to enjoy doing). I generally kept my threads locked in a cage, fed them queues and never let them meet face to face. With the deterministic side-effect free approach I can relax this.</p>
<p>A lot of the new developments (which are probably quite old by now) that have entered the mainstream such as being aware of the relationship between side-effects and concurrency, STM and even async seem to be steps in the right direction (even if they are just band aids). Hopefully, Haskell can be salvaged or there is another language in the pipeline that gets it all right.  </p>
<p>Food for thought, thanks. I will look out for your PFPL.</p>
<p id="comment-like-1301" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1301&#038;_wpnonce=a56916b942" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1301" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dmbarbour even depth-2 parent highlander-comment" id="comment-1300">
				<div id="div-comment-1300" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://2.gravatar.com/avatar/5f2716777689db5a800e9cab12812f93?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://awelonblue.wordpress.com' rel='external nofollow ugc' class='url'>dmbarbour</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1300">April 2, 2014 at 11:31 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1300"></div><p>It bothers me that so many people conflate concurrency with non-determinism. These are orthogonal properties. We can have a non-deterministic, fully sequential computation simply by asking for a random choice at some steps. Conversely, we can have deterministic, concurrent models &#8211; e.g. <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life" rel="nofollow">Conway&#8217;s Game of Life</a> is Turing complete and formally models all cells as updating concurrently (at the same logical time). Temporal logic and event calculus are two more examples of deterministic concurrency.</p>
<p>Concurrency is a property of the model or problem domain. Parallelism is a property of the <i>implementation</i> &#8211; e.g. whether we use more than one processor. This is the best distinction I&#8217;ve found. Not every concurrent model offers effective opportunity for parallelism, and not every opportunity for parallel implementation involves concurrency. All three concepts featured here &#8211; non-determinism, concurrency, and parallelism &#8211; are entirely distinct and orthogonal.</p>
<p>Unfortunately, multi-threaded imperative programming makes it difficult to consider these concepts separately. I suppose this is why so many people conflate them.</p>
<p id="comment-like-1300" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1300&#038;_wpnonce=07c348650b" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1300" class="comment-like-feedback">Liked by <a href="#" class="view-likers" data-like-count="1">1 person</a></span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-robertharper bypostauthor odd alt depth-2 parent highlander-comment" id="comment-1304">
				<div id="div-comment-1304" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1304">April 3, 2014 at 8:24 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1304"></div><p>Well, please see PFPL and agree to disagree. </p>
<p id="comment-like-1304" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1304&#038;_wpnonce=25e3aa0347" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1304" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dmbarbour even depth-2 parent highlander-comment" id="comment-1305">
				<div id="div-comment-1305" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://2.gravatar.com/avatar/5f2716777689db5a800e9cab12812f93?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://awelonblue.wordpress.com' rel='external nofollow ugc' class='url'>dmbarbour</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1305">April 3, 2014 at 11:31 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1305"></div><p>PFPL describes only one model for concurrency, plus an adaptation of this model to an Algol. Are you attempting to generalize from a single example of concurrency? That seems rather premature. </p>
<p>&#8220;All cars are red; look at my book, it has an example of a red car!&#8221;  s/car/concurrency s/red/non-deterministic</p>
<p id="comment-like-1305" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1305&#038;_wpnonce=03ffb5ea11" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1305" class="comment-like-feedback">Liked by <a href="#" class="view-likers" data-like-count="1">1 person</a></span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-robertharper bypostauthor odd alt depth-2 highlander-comment" id="comment-1306">
				<div id="div-comment-1306" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1306">April 3, 2014 at 3:17 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1306"></div><p>I am using the pi calculus, a general model of concurrency, as a basis for what concurrency means.</p>
<p id="comment-like-1306" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1306&#038;_wpnonce=33677fee0d" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1306" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-robertharper bypostauthor even depth-2 parent highlander-comment" id="comment-1310">
				<div id="div-comment-1310" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1310">April 4, 2014 at 11:43 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1310"></div><p>I don&#8217;t agree with you, as I I&#8217;ve explained here and in PFPL.</p>
<p id="comment-like-1310" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1310&#038;_wpnonce=2bc0e7d7a2" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1310" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dmbarbour odd alt depth-2 parent highlander-comment" id="comment-1311">
				<div id="div-comment-1311" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://2.gravatar.com/avatar/5f2716777689db5a800e9cab12812f93?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://awelonblue.wordpress.com' rel='external nofollow ugc' class='url'>dmbarbour</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1311">April 4, 2014 at 1:20 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1311"></div><p>Where do you explain your disagreement in PFPL? PFPL describes one general model of concurrency (Milner&#8217;s process calculus) but, as far as I can tell, PFPL does not present an argument that <i>every</i> model of concurrency must exhibit non-determinism. </p>
<p>Could you point me to a place where you clearly argue your opinion?</p>
<p id="comment-like-1311" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1311&#038;_wpnonce=97321f4f2d" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1311" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-robertharper bypostauthor even depth-2 parent highlander-comment" id="comment-1313">
				<div id="div-comment-1313" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1313">April 4, 2014 at 6:55 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1313"></div><p>it&#8217;s implicit in the decomposition of the pi calculus into non-deterministic composition, plus a bunch of stuff, such as channels, that have not much to do with concurrency (they are assignables, essentially).</p>
<p id="comment-like-1313" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1313&#038;_wpnonce=c855aff28c" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1313" class="comment-like-feedback">Liked by <a href="#" class="view-likers" data-like-count="1">1 person</a></span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dmbarbour odd alt depth-2 highlander-comment" id="comment-1316">
				<div id="div-comment-1316" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://2.gravatar.com/avatar/5f2716777689db5a800e9cab12812f93?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://awelonblue.wordpress.com' rel='external nofollow ugc' class='url'>dmbarbour</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1316">April 4, 2014 at 7:21 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1316"></div><p>Decomposing pi calculus to find the operator of concurrency seems an odd sort of reductionism, rather like trying to tear apart a bird to identify a flight bone.</p>
<p>I do believe the elements you&#8217;re dismissing &#8211; processes and channels &#8211; are the relevant ones. It isn&#8217;t that we need processes and channels specifically, but rather that they play the necessary roles for a concurrent system: independent definition of subsystems, and simultaneous interactions between subsystems.</p>
<p id="comment-like-1316" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1316&#038;_wpnonce=b99e5b1ed9" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1316" class="comment-like-feedback">Liked by <a href="#" class="view-likers" data-like-count="1">1 person</a></span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment even depth-2 parent highlander-comment" id="comment-1308">
				<div id="div-comment-1308" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://i0.wp.com/pbs.twimg.com/profile_images/57592418/lambda512_normal.png?resize=32%2C32' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://twitter.com/jlouis666' rel='external nofollow ugc' class='url'>JesperLouis Andersen (@jlouis666)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1308">April 4, 2014 at 4:53 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1308"></div><p>In my experience, most concurrency models allow you to implement one in another in practice. A proof of their equivalence is much harder, but you can often get the same effect from one in another model.</p>
<p>The Pi calculus is, to me, general in same sense that Lambda-calc is (The Turing Machine being an important but largely uninteresting detour). You would never program in Pi, but it encapsulates all of &#8220;what is a concurrent action&#8221; that it is excellent as a vehicle of exposition.</p>
<p>The key is that I can describe a random process in the Pi calc as one hooked up to a radioactive decay source pushing bits out on a channel.</p>
<p>And I can probably describe Game of Life by modeling each cell as a process. For simplicity, I could use the polyadic Pi calc which is equivalent to the monadic Pi calc to describe this model.</p>
<p>In that view, the two models are not that different from each other. It all depends on what level of abstraction I work on.</p>
<p id="comment-like-1308" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1308&#038;_wpnonce=469d5c9a10" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1308" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dmbarbour odd alt depth-2 parent highlander-comment" id="comment-1312">
				<div id="div-comment-1312" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://2.gravatar.com/avatar/5f2716777689db5a800e9cab12812f93?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://awelonblue.wordpress.com' rel='external nofollow ugc' class='url'>dmbarbour</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1312">April 4, 2014 at 1:50 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1312"></div><p>&#8220;The Pi calculus is, to me, general in same sense that Lambda-calc is&#8221;</p>
<p>It&#8217;s certainly &#8216;general&#8217;, but that seems logically irrelevant to the present argument. </p>
<p>Consider: There are many &#8216;general&#8217; models of computation &#8211; Lambda calculus, Turing machines, <i>non-deterministic</i> Turing machines, Actors model, cellular automata, etc.. &#8211; and it happens that some of these happen to exhibit concurrency and/or non-determinism. But that doesn&#8217;t imply non-determinism and concurrency are essential for computation. </p>
<p>To say: <i>&#8220;Pi calculus is a general model of concurrency and exhibits non-determinism, therefore all models of concurrency should exhibit non-determinism&#8221;</i> is directly analogous to the false argument: <i>&#8220;Lambda calculus is a general model of computation and exhibits substitution semantics, therefore all models of concurrency should exhibit substitution semantics&#8221;</i>.  I don&#8217;t know the name for this fallacy, but the formal structure seems invalid.</p>
<p>So, either I&#8217;m badly misreading Professor Harper&#8217;s position, or he isn&#8217;t explaining it well&#8230; or his argument for his position isn&#8217;t logically valid.</p>
<p>Of course, definitions aren&#8217;t based in logical validity. They&#8217;re based in history, and operational utility. </p>
<p>Given that we have models exhibiting non-determinism without concurrency (such as NDTMs, or non-deterministic oracle machines) AND we have models exhibiting what most people would consider interactive concurrency without non-determinism (such as cellular automata, event calculus, temporal logics, synchronous reactive programming, and functional reactive programming), it seems ridiculous to me that we insist on conflating these. It&#8217;s simply more useful to address concurrency and non-determinism as orthogonal properties.</p>
<p id="comment-like-1312" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1312&#038;_wpnonce=c440233798" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1312" class="comment-like-feedback">Liked by <a href="#" class="view-likers" data-like-count="1">1 person</a></span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-robertharper bypostauthor even depth-2 parent highlander-comment" id="comment-1314">
				<div id="div-comment-1314" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1314">April 4, 2014 at 6:57 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1314"></div><p>define orthogonal.  it&#8217;s a pretense word that has no meaning.</p>
<p id="comment-like-1314" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1314&#038;_wpnonce=510927b6a6" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1314" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dmbarbour odd alt depth-2 highlander-comment" id="comment-1315">
				<div id="div-comment-1315" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://2.gravatar.com/avatar/5f2716777689db5a800e9cab12812f93?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://awelonblue.wordpress.com' rel='external nofollow ugc' class='url'>dmbarbour</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1315">April 4, 2014 at 7:14 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1315"></div><p>Here, I use the word &#8216;orthogonal&#8217; to describe variables that may vary independently, even if they don&#8217;t in practice. </p>
<p>For example: the color of a car is orthogonal to the shape of the car, even though some models of car have a high correlation with certain colors.</p>
<p>When I say that concurrency is orthogonal to non-determinism, that perhaps doesn&#8217;t make much sense to you &#8211; because you are attempting to *define* concurrency as meaning non-deterministic composition. (Even though we already have the word &#8220;non-determinism&#8221; for that purpose.) Unfortunately, your definition isn&#8217;t compatible even with the English definition of concurrency (which is a rather low bar to meet!). A glance at Dictionary.com offers: &#8220;cooperation, as of agents or causes; combined action or effort&#8221; or &#8220;simultaneous occurrence; coincidence: the concurrence of several unusual events&#8221;</p>
<p>I define concurrency as describing any model of independent but interacting subsystems, of which multi-agent systems are the prototypical example. The most important formal parts are the &#8216;independent&#8217; (we can define these subsystems separately) and &#8216;interacting&#8217; (we cannot explain the local behavior of a subsystem independently of the greater system). This fits the English definition, and includes common examples like multi-agent systems or pi calculus (where processes may be independently specified and interact).</p>
<p id="comment-like-1315" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1315&#038;_wpnonce=693ff2f98d" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1315" class="comment-like-feedback">Liked by <a href="#" class="view-likers" data-like-count="1">1 person</a></span></p>

		
				</div>
				</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent highlander-comment" id="comment-1229">
				<div id="div-comment-1229" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://graph.facebook.com/1402181855/picture?type=large&#038;_md5=d1f45993e3c22c03ff1a5ea91a64ee63' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='https://www.facebook.com/victor.eijkhout' rel='external nofollow ugc' class='url'>Victor Eijkhout</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1229">March 10, 2014 at 4:22 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1229"></div><p>&#8220;let val (xsl, xsg) = split xs&#8221;</p>
<p>That has linear running time, so your parallel algorithm takes N+N/2 +N/4+&#8230;=2N. Which is a log N improvement over the sequential time. That&#8217;s kinda bad. I think I&#8217;ll stick with my imperative program which reduced the running time *to* log N, not *by*.</p>
<p id="comment-like-1229" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1229&#038;_wpnonce=287bed6e34" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1229" class="comment-like-feedback">Like</span></p>

		
				</div>
				<ul class="children">
		<li class="comment byuser comment-author-robertharper bypostauthor odd alt depth-2 highlander-comment" id="comment-1230">
				<div id="div-comment-1230" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1230">March 10, 2014 at 4:31 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1230"></div><p>This can also be done in lg time in functional languages; just don&#8217;t use a list.  Nothing whatever to do with imperative.</p>
<p id="comment-like-1230" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1230&#038;_wpnonce=920dd9b5b4" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1230" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment even depth-2 parent highlander-comment" id="comment-1236">
				<div id="div-comment-1236" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='http://graph.facebook.com/1402181855/picture?type=large' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='https://www.facebook.com/victor.eijkhout' rel='external nofollow ugc' class='url'>Victor Eijkhout</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1236">March 11, 2014 at 10:51 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1236"></div><p>So why don&#8217;t you give that code? I suspect it looks far less elegant than what you&#8217;re displaying here.</p>
<p id="comment-like-1236" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1236&#038;_wpnonce=c553a6373e" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1236" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-robertharper bypostauthor odd alt depth-2 highlander-comment" id="comment-1237">
				<div id="div-comment-1237" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1237">March 11, 2014 at 2:43 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1237"></div><p>You can represent a sequence as a tree for which surgery takes logarithmic time.  And, as a bonus, it does it with a persistent, rather than a more restrictive ephemeral, data structure, and hence is readily used in a parallel setting.  Can&#8217;t beat it.</p>
<p id="comment-like-1237" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1237&#038;_wpnonce=0a1a0b7a74" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1237" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-vicdiesel even depth-2 parent highlander-comment" id="comment-1238">
				<div id="div-comment-1238" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9d20a9b2d1b5b2083cf68d90e5942611?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://victoricities.wordpress.com' rel='external nofollow ugc' class='url'>vicdiesel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1238">March 11, 2014 at 5:58 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1238"></div><p>Ever heard of caches? TLB? One of the reasons that functional languages will never be relevant in practice is that their practitioners have no concept of efficiency other than asymptotic. In the real world proportionality constants actually matter.</p>
<p id="comment-like-1238" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1238&#038;_wpnonce=5a25f751d3" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1238" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-robertharper bypostauthor odd alt depth-2 highlander-comment" id="comment-1239">
				<div id="div-comment-1239" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1239">March 11, 2014 at 6:30 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1239"></div><p>Funnily enough, Guy Blelloch and I wrote a paper on just this topic published at POPL 2013, called &#8220;Cache and I/O Efficient Functional Algorithms&#8221;.  I suggest you have a look at that, and at the growing body of work on analyzing the efficiency of functional programs.  My PFPL has a chapter on writing efficient parallel programs using a functional model; it&#8217;s based on Guy&#8217;s work on using FL&#8217;s for efficient parallelism.  Manuel Chakravarty and Gabriele Keller, among others, have done a lot of work in this area over the last decade or two.</p>
<p id="comment-like-1239" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1239&#038;_wpnonce=180fa17be5" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1239" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-vicdiesel even depth-2 parent highlander-comment" id="comment-1240">
				<div id="div-comment-1240" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9d20a9b2d1b5b2083cf68d90e5942611?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://victoricities.wordpress.com' rel='external nofollow ugc' class='url'>vicdiesel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1240">March 11, 2014 at 7:58 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1240"></div><p>I&#8217;ll look for your paper. Just to motivate me: what percentage of peak performance do you get on matrix-matrix multiplication? Do you do better than the Fortran reference?</p>
<p id="comment-like-1240" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1240&#038;_wpnonce=77b048d495" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1240" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-robertharper bypostauthor odd alt depth-2 highlander-comment" id="comment-1241">
				<div id="div-comment-1241" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1241">March 11, 2014 at 8:53 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1241"></div><p>Undoubtedly not on dense matrix multiplication, but I don&#8217;t have figures to hand.  But that&#8217;s hardly the point.  The algorithms that people wish to consider these days are far more sophisticated than anyone could stand to program in Fortran.  Surely you appreciate this, since you seem to program in Fortran rather than machine code, or dedicated hardware built from transistors specifically for dense matrix multiplication.  And it is far easier to take advantage of parallelism in a functional language than in any imperative language, including Fortran.  Vectorization is a joke, and HPF was a total failure, I wonder why?</p>
<p id="comment-like-1241" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1241&#038;_wpnonce=5064e01851" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1241" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-vicdiesel even depth-2 parent highlander-comment" id="comment-1242">
				<div id="div-comment-1242" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9d20a9b2d1b5b2083cf68d90e5942611?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://victoricities.wordpress.com' rel='external nofollow ugc' class='url'>vicdiesel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1242">March 11, 2014 at 10:51 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1242"></div><p>HPF was dead on arrival because compiler writers don&#8217;t understand caches and the cost of memory copies. Its performance was a fraction of what the Fortran programmers were used to, so they never considered it. That had nothing to do with being imperative. It was in fact closer to your abstract ideal than plain Fortran. (See where I&#8217;m coming from? Most attempts at abstraction suck at performance.)</p>
<p>I don&#8217;t understand your &#8220;vectorization is a joke&#8221; comment. On modern processors, if you don&#8217;t vectorize you don&#8217;t get performance. Does your functional code generate AVX instructions? I suspect not. Your remarks about representing a list as a tree will also work beautifully in the face of the reality of cachelines. Not.</p>
<p>Look, I like abstractions. I just think that the functional abstraction (for as far as I&#8217;ve seen it) ignores the reality of modern architectures.</p>
<p>Oh, and about taking advantage of parallelism, how about I give you a cluster with a couple thousand nodes, how well will you fare?</p>
<p id="comment-like-1242" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1242&#038;_wpnonce=a4f4c351eb" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1242" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-robertharper bypostauthor odd alt depth-2 highlander-comment" id="comment-1243">
				<div id="div-comment-1243" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1243">March 12, 2014 at 12:09 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1243"></div><p>Chakravarty is the best person to ask about current performance figures.  By &#8220;vectorization&#8221; I mean trying to turn DO loops into vector operations; it&#8217;s an artifact of one-by-one processing.  Compilers for parallel platforms make full use of available parallel instructions sets, including coprocessors.</p>
<p id="comment-like-1243" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1243&#038;_wpnonce=3367dedfb5" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1243" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-vicdiesel even depth-2 parent highlander-comment" id="comment-1287">
				<div id="div-comment-1287" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9d20a9b2d1b5b2083cf68d90e5942611?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://victoricities.wordpress.com' rel='external nofollow ugc' class='url'>vicdiesel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1287">March 29, 2014 at 11:39 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1287"></div><p>&#8220;Compilers for parallel platforms make full use of available parallel instructions sets, including coprocessors.&#8221; You wish. So why are we still unrolling loops so that the compiler will finally do its damn job?</p>
<p id="comment-like-1287" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1287&#038;_wpnonce=c453e88066" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1287" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-robertharper bypostauthor odd alt depth-2 highlander-comment" id="comment-1288">
				<div id="div-comment-1288" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1288">March 29, 2014 at 1:59 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1288"></div><p>I meant compilers for functional languages do so.  There are no loops to unroll, that&#8217;s the whole point.</p>
<p id="comment-like-1288" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1288&#038;_wpnonce=8edef306e9" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1288" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-vicdiesel even depth-2 highlander-comment" id="comment-1289">
				<div id="div-comment-1289" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9d20a9b2d1b5b2083cf68d90e5942611?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://victoricities.wordpress.com' rel='external nofollow ugc' class='url'>vicdiesel</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-1289">March 29, 2014 at 2:44 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_1289"></div><p>But a few comments back you were proposing to implement a list as a tree to make splitting linear. How are you going to apply vector instructions to that? Never mind that you&#8217;re probably losing 7/8ths of your bandwidth because of your tree organization.</p>
<p>Really, do you know what the stream benchmark is? If you imlemented that with one of your tree-sequences, can you get more than, oh, say, 5 percent of the stream performance? The code is simple, shouldn&#8217;t take more than 10 minutes to write.</p>
<p>Report back to me&#8230;..</p>
<p id="comment-like-1289" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=1289&#038;_wpnonce=55b012713d" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-1289" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-183">
				<div id="div-comment-183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://kwoz.wordpress.com/2011/03/27/parallelism-versus-concurrency/' rel='external nofollow ugc' class='url'>Parallelism versus concurrency &laquo; kwoz online</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-183">March 27, 2011 at 8:13 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_183"></div><p>[&#8230;] adding lamda expressions to the language, Robert Harper from Carnegie Mellon University argues that functional programming can hide concurrency complexities from the programmer and allow the runtime environment to take care of them. This seems like the [&#8230;]</p>
<p id="comment-like-183" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=183&#038;_wpnonce=b131ee592a" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-183" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-johneganz even thread-even depth-1 parent highlander-comment" id="comment-169">
				<div id="div-comment-169" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://1.gravatar.com/avatar/1b33e4065ce33ca9873fea6074682a5d?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://johneganz.wordpress.com' rel='external nofollow ugc' class='url'>johneganz</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-169">March 26, 2011 at 5:34 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_169"></div><blockquote><p>Now I can hear you object, but isn’t concurrency <i>required</i> to implement parallelism?</p></blockquote>
<p>Nope.  My first objections is &#8220;but isn&#8217;t parallelism <i>required</i> to implement concurrency?&#8221;</p>
<blockquote><p>Parallelism, on the other hand, is all about dependencies among the subcomputations of a deterministic computation.  The result is not in doubt, but there are many means of achieving it, some more efficient than others.  We wish to exploit those opportunities to our advantage.</p></blockquote>
<p>Concurrency, on the other hand (at least as you have defined it in this post), is really nothing more than the dynamic resolution at run time of scheduling which of the all the possibly non-determinsitic computations that could possibly be executing at that moment in time in such a way that they can execute in parallel so that the result is deterministic.</p>
<p>In fact, I don&#8217;t even agree with your definitions of the terms &#8220;concurrency&#8221; and &#8220;parallel&#8221;.  It is clear that a &#8220;dictionary&#8221; definition  of the terms, at least in the context in which they are being used, both mean &#8220;at the same time.&#8221;</p>
<p>You have attempted to add additional qualifiers to their usage to further specialize their meaning.  IMHO, and this is certainly a point that reasonable people can disagree on, the additional qualifiers you have applied to the terms are not in common usage in the community that would use these terms for the purposes being discussed.  Personally, I have never see the words used in a CS context in the way that you have described, nor do I see how your specialization of the terms adds to their descriptive power.</p>
<p>Assuming that the two terms mean something different, fundamentally both &#8220;concurrent&#8221; and &#8220;parallel&#8221; computations must produce <i>results</i> that are deterministic.  Often when dealing with concurrent/parallel programming on typical hardware, the amount of <i>time</i> it takes to perform the computation can be non-deterministic, but it is always a deterministic <i>result</i>.</p>
<p>In practice, on the vast majority of commercially available computers, concurrent or parallel programming must eventually be reduced to some atomic primitives provided by the underlying architecture.  For a LL/SC based architecture, the amount of time it takes to perform an atomic compare and swap is non-deterministic.  This means that in practice, on most LL/SC based architectures, all parallel operations will most likely reduce to a primitive that takes a non-deterministic amount of time to complete.</p>
<p>It is my opinion that &#8220;concurrent&#8221; and &#8220;parallel&#8221; mean exactly the same thing, and that the distinction you assert exists is not one that it shared by the larger community.</p>
<p>I also find your definition somewhat vague and confusing- it uses the terms &#8220;deterministic&#8221; and &#8220;non-deterministic&#8221; to differentiate concurrency and parallelism such that </p>
<blockquote><p>Parallelism, on the other hand, is all about dependencies among the subcomputations of a deterministic computation.</p></blockquote>
<p> What does this mean?  It would seem to imply that concurrent computations are &#8220;non-deterministic&#8221;, but non-determinstic how?  The result they compute?  Or the amount of time?  Clearly we are only interested in computations that produce deterministic results, which leaves only the amount of time it takes to produce those deterministic results.  The only conclusion is that &#8220;Concurrency takes a non-deterministic amount of time, and parallelism takes a deterministic amount of time.&#8221;  But on most commercially available computers, truly deterministic, bound time parallel computations are simply not possible because the architecture does not provide atomic primitives that are guaranteed to complete in a bounded number of steps.  Clearly this reasoning about your definition of the terms is in error because it implies that from a practical point of view, parallelism doesn&#8217;t exist, only concurrency.</p>
<p id="comment-like-169" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=169&#038;_wpnonce=a79056afba" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-169" class="comment-like-feedback">Like</span></p>

		
				</div>
				<ul class="children">
		<li class="comment byuser comment-author-johnzabroski odd alt depth-2 highlander-comment" id="comment-178">
				<div id="div-comment-178" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/6d5add2f37f59fe8f3e5a5e8e7a851ab?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn">johnzabroski</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-178">March 27, 2011 at 1:43 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_178"></div><p>John,</p>
<p>Concurrency is about externally visible behavior.  Parallelism adds no expressive power to a language.  The time a parallel operation takes to execute is whatever time it starts until it produces output.  In mechanized solutions, model of parallelism is really a property derived from the language semantics itself &#8211; for example, programs defined in terms of absolutely non-circular attribute grammars can then have a model of parallelism that shreds the program graph by leveraging the non-circularity property.  The results can also be memoized and in turn used for incremental rather than strictly parallel computation.  A given model tells you how much performance you can squeeze out from it.</p>
<p>Also, there exists a form of concurrent programming, deterministic concurrency, that has no race conditions, is as easy to program as sequential programs, and can implicitly exploit parallel processors: dataflow programming.  It is the only solution to shared memory concurrency that scales, and is arguably the most appropriate default solution for taking advantage of multi-core processors.</p>
<p>But there is more to concurrency research than multi-core processors.  The Internet&#8217;s infrastructure has grown massively, and it is approaching its ultimate bottleneck &#8211; the speed of light!  For most applications, the speed of light is embarassingly adequate, but roundtrip communication around the globe faces real communication issues, such as propagation delay, and therefore communication protocol design becomes the dominating factor in performance.  Translation: The better we do this, the cooler the Cloud apps we can build that end-users get really excited about.</p>
<p>Finally, there is no reason why nondeterministic composition means composition in the sense of the Kahn Principle.  True, real world concurrency (as in, what is implementd in programs today) might have meager or ambiguous agents, resulting in the input-output relation not matching the history relation of the program.  We might be nondetereministically composing problems, and doing it in dumb ways.  The point behind teaching concurrency is to teach how to do it effectively for real world problems, and avoid traps proven to exist, thanks to good theory &#8211; like the Brock-Ackerman Anomaly.  You really, really don&#8217;t want to build systems that pervasively exhibit the Brock-Ackerman Anomaly, if at all.  That&#8217;s because determinism is one of the most important properties you can shoot for in designing systems; you only give it up when you have to, not simply &#8220;cuz&#8221;.</p>
<p id="comment-like-178" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=178&#038;_wpnonce=457e052722" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-178" class="comment-like-feedback">Liked by <a href="#" class="view-likers" data-like-count="1">1 person</a></span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bowaggoner even depth-2 highlander-comment" id="comment-179">
				<div id="div-comment-179" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/90ff6fa97674f4fc3462f2a5fb9f7d20?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://bo1024.wordpress.com' rel='external nofollow ugc' class='url'>bowaggoner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-179">March 27, 2011 at 2:40 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_179"></div><p>As I understand it, the author views parallelism as an algorithmic or complexity-oriented concept. You can take any algorithm and analyze in terms of its efficiency in terms of parallelism. To do so requires no knowledge of the machine on which the algorithm runs. This process is &#8220;deterministic&#8221; in the sense that the orders of steps are clearly defined. &#8220;First the list is split in half, then the two halves are sorted in parallel.&#8221; &#8220;Given k processors working in parallel, the running time of this algorithm is O(k log k / n).&#8221;</p>
<p>On the other hand, concurrency is taken to mean the methods and steps required to actually implement parallel algorithms. These include mutexes and semaphores and all of the above. These are obviously machine-dependent and &#8220;non-deterministic&#8221; in the sense that the order and timing of steps are not clearly defined or known ahead of time. &#8220;Thread 2 waits until the lock is released by some other thread, then acquires the lock and waits on a signal&#8230;.&#8221;</p>
<p id="comment-like-179" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=179&#038;_wpnonce=359e5e80d3" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-179" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="pingback odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-65">
				<div id="div-comment-65" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://secure.gravatar.com/blavatar/4192ff5d4a07fc7f4fa2a2ff285af64e?s=32' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='https://existentialtype.wordpress.com/2011/03/21/the-dog-that-didnt-bark/' rel='external nofollow ugc' class='url'>The dog that didn&#8217;t bark &laquo; Existential Type</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-65">March 21, 2011 at 9:06 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_65"></div><p>[&#8230;] for first-year students at Carnegie Mellon.  Apart from parallelism, wbich I&#8217;ve already discussed, we are placing a strong emphasis on verification and proof as tools for the practicing programmer, [&#8230;]</p>
<p id="comment-like-65" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=65&#038;_wpnonce=d56d9d5c5d" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-65" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-schmerg even thread-even depth-1 highlander-comment" id="comment-56">
				<div id="div-comment-56" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/6f1b77a75fff8d1cca1e752ff327a2b2?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn">schmerg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-56">March 21, 2011 at 5:17 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_56"></div><p>I wrote a brief (some would say cryptic) note of some experimentation I did in this area &#8211; particularly a functional language based approach to achieve parallel execution of large computations without the need to address concurrency in any way in the expression of the problem.</p>
<p><a href="http://schmerg.com/concurrent-programming-is-hard-so-dont-do-it" rel="nofollow ugc">http://schmerg.com/concurrent-programming-is-hard-so-dont-do-it</a></p>
<p>My particular bugbear concerned the composability of such systems &#8211; assembling computations from libraries of code and the like to run across large computation grids of multicore machines. </p>
<p>In particular the language assembles the program so that it can executed in the minimum depth (as you describe) when given sufficient resources, but it can also balance any arbitrary problem across fewer resources and determine an optimal minimum depth for execution, and all this is done without changing the source code that expresses the problem.</p>
<p id="comment-like-56" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=56&#038;_wpnonce=1d5589df16" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-56" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-marklillibridge odd alt thread-odd thread-alt depth-1 parent highlander-comment" id="comment-51">
				<div id="div-comment-51" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://1.gravatar.com/avatar/d338954acc28dc4cc2100f737c41f890?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn">marklillibridge</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-51">March 20, 2011 at 8:54 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_51"></div><p>Do you count a memorization as a functional programming primitive?  Without it, some algorithms will be exponentially slower.</p>
<p>I don&#8217;t think you can implement memorization without concurrency.</p>
<p id="comment-like-51" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=51&#038;_wpnonce=33f5f7b944" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-51" class="comment-like-feedback">Like</span></p>

		
				</div>
				<ul class="children">
		<li class="comment byuser comment-author-robertharper bypostauthor even depth-2 highlander-comment" id="comment-85">
				<div id="div-comment-85" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn">abstract type</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-85">March 22, 2011 at 2:46 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_85"></div><p>If state is the same as concurrency, you&#8217;re right, but ordinarily people don&#8217;t think of it that way.  You can have memoization or not according to your selection of types.  There is no reason to force it on you, or deprive you of it.</p>
<p id="comment-like-85" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=85&#038;_wpnonce=0519b13f90" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-85" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="pingback odd alt thread-even depth-1 highlander-comment" id="comment-29">
				<div id="div-comment-29" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://botd.wordpress.com/2011/03/20/top-posts-1785/' rel='external nofollow ugc' class='url'>Top Posts &#8212; WordPress.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-29">March 19, 2011 at 8:06 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_29"></div><p>[&#8230;]  Parallelism is not concurrency In an earlier post I mentioned that one goal of the new introductory curriculum at Carnegie Mellon is to teach [&#8230;] [&#8230;]</p>
<p id="comment-like-29" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=29&#038;_wpnonce=2fcd8be881" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-29" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="pingback even thread-odd thread-alt depth-1 highlander-comment" id="comment-25">
				<div id="div-comment-25" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dhananjaynene.com/2011/03/20/links-for-2011-03-19/' rel='external nofollow ugc' class='url'>&raquo; links for 2011-03-19 (Dhananjay Nene)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-25">March 19, 2011 at 4:04 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_25"></div><p>[&#8230;] Parallelism is not concurrency « Existential Type Useful read RT: @tunixman Parallelism is not concurrency « Existential Type <a href="http://bit.ly/f5HhMF" rel="nofollow ugc">http://bit.ly/f5HhMF</a> (tags: via:packrati.us) [&#8230;]</p>
<p id="comment-like-25" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=25&#038;_wpnonce=b0f9abd5bc" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-25" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dmbarbour odd alt thread-even depth-1 parent highlander-comment" id="comment-20">
				<div id="div-comment-20" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://2.gravatar.com/avatar/5f2716777689db5a800e9cab12812f93?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://awelonblue.wordpress.com' rel='external nofollow ugc' class='url'>dmbarbour</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-20">March 19, 2011 at 11:46 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_20"></div><p>There are many models for deterministic concurrency: temporal logic programming, functional reactive programming, future passing with single assignment variables (promoted heavily by Peter Van Roy), Kahn process networks, concurrent constraint programming. I do not agree that concurrency is inherently coupled to non-determinism.</p>
<p>I do distinguish concurrency and parallelism: concurrency is a semantic property that says many behaviors are happening at the same time, and parallelism is an implementation property that says many calculations are happening at the same time. Concurrency can be implemented without parallelism, and parallelism without concurrency. </p>
<p>Concurrency is sometimes an good opportunity for parallelism. And high-performance parallelism is often easier to manage if you control it semantically (i.e. with concurrency) rather than as a mere implementation/optimization detail.</p>
<p id="comment-like-20" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=20&#038;_wpnonce=1510badba0" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-20" class="comment-like-feedback">Like</span></p>

		
				</div>
				<ul class="children">
		<li class="comment byuser comment-author-rafaeldff even depth-2 parent highlander-comment" id="comment-118">
				<div id="div-comment-118" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/38160b1f52d67ae219af39b6c9c11d4b?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://blogbaphonico.wordpress.com' rel='external nofollow ugc' class='url'>rafaeldff</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-118">March 23, 2011 at 2:36 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_118"></div><p>I believe you are conflating nondeterminism with &#8216;observable non-determinism&#8217;. Since you mentioned PvR, check out CTM section 4.1 (page 238).</p>
<p>Bearing this distinction in mind, dataflow concurrency and concurrent constraint programming both involve nondeterminism.</p>
<p id="comment-like-118" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=118&#038;_wpnonce=31e72080e5" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-118" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dmbarbour odd alt depth-2 highlander-comment" id="comment-131">
				<div id="div-comment-131" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://2.gravatar.com/avatar/5f2716777689db5a800e9cab12812f93?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://awelonblue.wordpress.com' rel='external nofollow ugc' class='url'>dmbarbour</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-131">March 24, 2011 at 1:17 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_131"></div><p>The relevant issue is whether nondeterminism exists in the semantics. PvR was working with Oz semantics, so he was stuck in the rather precarious position of explaining &#8216;yes, Oz threads can be indeterministic, but this here model is deterministic&#8217;. If you extracted just the model in question into its own language, though, there would be no question that the semantics are deterministic.</p>
<p>Concurrent constraint programming is often extended with nondeterminism of a very observable form: choice, backtracking.</p>
<p id="comment-like-131" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=131&#038;_wpnonce=f2e6e6a2bd" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-131" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yminsky even thread-odd thread-alt depth-1 parent highlander-comment" id="comment-19">
				<div id="div-comment-19" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/c780c247d39bf1b2583a138602ad81e7?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn"><a href='http://nanovert.wordpress.com' rel='external nofollow ugc' class='url'>yminsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-19">March 19, 2011 at 9:33 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_19"></div><p>I think I understand the argument you&#8217;re making, but I would argue it&#8217;s not as cut-and-dried as you suggest.  </p>
<p>It&#8217;s true that concurrency is primarily about non-determinism, and there exist useful deterministic approaches to parallelism for which concurrency is not terribly relevant.  But efficient parallel systems are almost always non-deterministic, and I think this is no accident.  Building efficient deterministic parallelism is hard, and I believe it&#8217;s not actually possible for the general case, because it requires too much of an understanding in advance of the costs of the different parts of a computation than is reasonable to expect.</p>
<p>So, while I think distinguishing concurrency and parallelism is important, and that a deterministic approach to parallelism is a great pedagogical place to start, I remain wholly unconvinced that concurrency is not relevant to parallelism.</p>
<p id="comment-like-19" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=19&#038;_wpnonce=efd7cbf5c2" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-19" class="comment-like-feedback">Like</span></p>

		
				</div>
				<ul class="children">
		<li class="comment byuser comment-author-jlouisa odd alt depth-2 parent highlander-comment" id="comment-39">
				<div id="div-comment-39" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://1.gravatar.com/avatar/d32f9c43d730bec85b7021a80ad492ac?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn">jlouisa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-39">March 20, 2011 at 9:23 am</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_39"></div><p>Let me counter your argument with the following: You surely know Google&#8217;s Sawzall language for map-reduce queries. Where in map-reduce do you deploy concurrency to solve your problem? Where is the non-deterministic part? I think the answer to those questions are &#8220;nowhere&#8221;.</p>
<p>Another, more machine-level observation is the distinction between a GPU (mostly SIMD executing) and a SMP CPU (mostly MIMD executing). The SIMD approach is massively parallel, yet it stands no chance of ever doing concurrent work since all cores are step-locked in choreography to execute the same instruction.</p>
<p>Note that MIMD is much more applicable to a heavily concurrent setting. If we have 30000 individual concurrent processes, we can as well map them to as many physical cores we have and gamble that spinning the cores will yield at least some performance benefit. This doesn&#8217;t work in a SIMD setting since the c. processes might be executing wildly different tasks.</p>
<p id="comment-like-39" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=39&#038;_wpnonce=c0737dad0d" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-39" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
		<li class="comment byuser comment-author-robertharper bypostauthor even depth-2 highlander-comment" id="comment-89">
				<div id="div-comment-89" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9a3bf4aba89a3d8f593ec29e75e5884a?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn">abstract type</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-89">March 22, 2011 at 2:53 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_89"></div><p>Sawzall, and its derivatives, well illustrate my point.</p>
<p id="comment-like-89" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=89&#038;_wpnonce=498b09e27f" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-89" class="comment-like-feedback">Like</span></p>

		
				</div>
				</li><!-- #comment-## -->
</ul><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-marchamann odd alt thread-even depth-1 highlander-comment" id="comment-11">
				<div id="div-comment-11" class="comment-body">
				<div class="comment-author vcard">
			<img alt='' src='https://0.gravatar.com/avatar/9e68e1302ac10ee601644143401301cc?s=32&#038;d=wavatar&#038;r=G' class='avatar avatar-32' height='32' width='32' />			<cite class="fn">marchamann</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata">
			<a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/#comment-11">March 18, 2011 at 2:09 pm</a>		</div>

		<div class="cs-rating pd-rating" id="pd_rating_holder_4246534_comm_11"></div><p>I am a &#8220;language-based model of computation&#8221; fellow traveler, and I agree that functional programming is a great basis for parallelism.</p>
<p>However, I have to disagree with your characterization that parallelism and concurrency having nothing to do with each other.</p>
<p>While your rationale is much stronger than some of the other merely pedantic presentations of the same idea I&#8217;ve seen elsewhere, I think that parallelism and concurrency are at the very least dual to each other, perhaps even the same phenomenon looked at from two different ends.</p>
<p>Parallelism happens when you start out thinking you have a single &#8220;atomic&#8221; computation, but then realize that you really want to break it up into independent sub-computations.  You solve this problem, as you point out, by understanding where your real dependencies are, and where the perceived dependencies are merely artifacts of fuzzy thinking and sloppy organization.  </p>
<p>As you also point out, functional programming is a great tool for helping to clarify these issues.</p>
<p>Concurrency, on the other hand, happens when you start out thinking you have two completely independent computations, but it turns out that they share dependencies, intentional and necessary or not.  You solve this problem by understanding where your real dependencies are, and where they are merely artifacts of fuzzy thinking and sloppy organization, such as the gratuitous use of shared state.</p>
<p>Here too, functional programming is a great tool to clarify which is which.</p>
<p>I guess ultimately my objection is that, by separating the two phenomena, you are being insufficiently bold in your claims for FP! ;-)</p>
<p id="comment-like-11" data-liked=comment-not-liked class="comment-likes comment-not-liked"><a href="https://existentialtype.wordpress.com/2011/03/17/parallelism-is-not-concurrency/?like_comment=11&#038;_wpnonce=edc20bd4f3" class="comment-like-link needs-login" rel="nofollow" data-blog="2157150"><span>Like</span></a><span id="comment-like-count-11" class="comment-like-feedback">Liked by <a href="#" class="view-likers" data-like-count="1">1 person</a></span></p>

		
				</div>
				</li><!-- #comment-## -->
</ol>




</div><!-- #comments -->
	
	</div>



	<div id="sidebar">
				<ul>

		<li id="search-3" class="widget widget_search"><form method="get" id="searchform" action="https://existentialtype.wordpress.com/">
<div><label for="s" class="search-label">Search</label><input type="text" value="" name="s" id="s" />
<input type="submit" id="searchsubmit" value="Search" />
</div>
</form></li>

		<li id="recent-posts-3" class="widget widget_recent_entries">
		<h2 class="widgettitle">Recent Posts</h2>

		<ul>
											<li>
					<a href="https://existentialtype.wordpress.com/2017/11/04/sequentiality-is-the-essence-of-parallelism/">Sequentiality as the Essence of&nbsp;Parallelism</a>
									</li>
											<li>
					<a href="https://existentialtype.wordpress.com/2017/03/04/a-proof-by-contradiction-is-not-a-proof-that-derives-a-contradiction/">Proofs by contradiction, versus contradiction&nbsp;proofs</a>
									</li>
											<li>
					<a href="https://existentialtype.wordpress.com/2016/07/11/pclsring-in-semantics/">PCLSRING in Semantics</a>
									</li>
											<li>
					<a href="https://existentialtype.wordpress.com/2016/06/03/pfpl-commentary/">PFPL Commentary</a>
									</li>
											<li>
					<a href="https://existentialtype.wordpress.com/2016/02/22/it-is-what-it-is-and-nothing-else/">It Is What It Is (And Nothing&nbsp;Else)</a>
									</li>
					</ul>

		</li>
<li id="recent-comments-2" class="widget widget_recent_comments"><h2 class="widgettitle">Recent Comments</h2>
				<ul id="recentcomments">
											<li class="recentcomments">
							<a href='http://thebreakfastpost.com/2017/12/02/notes-on-idris/' rel='external nofollow ugc' class='url'>Notes on Idris &#8211; The Breakfast Post</a> on <a href="https://existentialtype.wordpress.com/2011/04/09/persistence-of-memory/#comment-3552">Persistence of Memory</a>						</li>

												<li class="recentcomments">
							<a href='http://codewenda.com/javascript%e6%98%af%e4%b8%80%e7%a7%8d%e6%97%a0%e7%b1%bb%e5%9e%8b%e7%9a%84%e8%af%ad%e8%a8%80%e5%90%97%ef%bc%9f/' rel='external nofollow ugc' class='url'>JavaScript是一种无类型的语言吗？ | CODE问答</a> on <a href="https://existentialtype.wordpress.com/2011/03/19/dynamic-languages-are-static-languages/#comment-3546">Dynamic Languages are Static&nbsp;Languages</a>						</li>

												<li class="recentcomments">
							<a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a> on <a href="https://existentialtype.wordpress.com/2017/11/04/sequentiality-is-the-essence-of-parallelism/#comment-3541">Sequentiality as the Essence of&nbsp;Parallelism</a>						</li>

												<li class="recentcomments">
							<a href='https://www.facebook.com/app_scoped_user_id/663548071/' rel='external nofollow ugc' class='url'>Andy Adams-Moran</a> on <a href="https://existentialtype.wordpress.com/2017/11/04/sequentiality-is-the-essence-of-parallelism/#comment-3540">Sequentiality as the Essence of&nbsp;Parallelism</a>						</li>

												<li class="recentcomments">
							<a href='http://www.cs.cmu.edu/~rwh' rel='external nofollow ugc' class='url'>Robert Harper</a> on <a href="https://existentialtype.wordpress.com/2017/11/04/sequentiality-is-the-essence-of-parallelism/#comment-3539">Sequentiality as the Essence of&nbsp;Parallelism</a>						</li>

										</ul>
				</li>
<li id="archives-2" class="widget widget_archive"><h2 class="widgettitle">Archives</h2>

			<ul>
					<li><a href='https://existentialtype.wordpress.com/2017/11/'>November 2017</a></li>
	<li><a href='https://existentialtype.wordpress.com/2017/03/'>March 2017</a></li>
	<li><a href='https://existentialtype.wordpress.com/2016/07/'>July 2016</a></li>
	<li><a href='https://existentialtype.wordpress.com/2016/06/'>June 2016</a></li>
	<li><a href='https://existentialtype.wordpress.com/2016/02/'>February 2016</a></li>
	<li><a href='https://existentialtype.wordpress.com/2015/01/'>January 2015</a></li>
	<li><a href='https://existentialtype.wordpress.com/2014/09/'>September 2014</a></li>
	<li><a href='https://existentialtype.wordpress.com/2014/07/'>July 2014</a></li>
	<li><a href='https://existentialtype.wordpress.com/2014/04/'>April 2014</a></li>
	<li><a href='https://existentialtype.wordpress.com/2014/03/'>March 2014</a></li>
	<li><a href='https://existentialtype.wordpress.com/2013/07/'>July 2013</a></li>
	<li><a href='https://existentialtype.wordpress.com/2013/01/'>January 2013</a></li>
	<li><a href='https://existentialtype.wordpress.com/2012/12/'>December 2012</a></li>
	<li><a href='https://existentialtype.wordpress.com/2012/09/'>September 2012</a></li>
	<li><a href='https://existentialtype.wordpress.com/2012/08/'>August 2012</a></li>
	<li><a href='https://existentialtype.wordpress.com/2012/02/'>February 2012</a></li>
	<li><a href='https://existentialtype.wordpress.com/2011/05/'>May 2011</a></li>
	<li><a href='https://existentialtype.wordpress.com/2011/04/'>April 2011</a></li>
	<li><a href='https://existentialtype.wordpress.com/2011/03/'>March 2011</a></li>
			</ul>

			</li>
<li id="rss_links-3" class="widget widget_rss_links"><h2 class="widgettitle">Subscription</h2>
<ul><li><a href="https://existentialtype.wordpress.com/feed/" title="Subscribe to Posts">RSS - Posts</a></li><li><a href="https://existentialtype.wordpress.com/comments/feed/" title="Subscribe to Comments">RSS - Comments</a></li></ul>
</li>
<li id="meta-3" class="widget widget_meta"><h2 class="widgettitle">Admin</h2>

		<ul>
			<li><a href="https://wordpress.com/start?ref=wplogin">Register</a></li>			<li><a href="https://existentialtype.wordpress.com/wp-login.php">Log in</a></li>
			<li><a href="https://existentialtype.wordpress.com/feed/">Entries feed</a></li>
			<li><a href="https://existentialtype.wordpress.com/comments/feed/">Comments feed</a></li>

			<li><a href="https://wordpress.com/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.com</a></li>
		</ul>

		</li>
		</ul>
	</div>



<div id="footer">
	<p>
	<br />
	<a href="https://wordpress.com/?ref=footer_website" rel="nofollow">Create a free website or blog at WordPress.com.</a>
	</p>
</div>

</div>

		<!--  -->
<script src='//0.gravatar.com/js/gprofiles.js?ver=202144y' id='grofiles-cards-js'></script>
<script id='wpgroho-js-extra'>
var WPGroHo = {"my_hash":""};
</script>
<script crossorigin='anonymous' type='text/javascript' src='https://s0.wp.com/wp-content/mu-plugins/gravatar-hovercards/wpgroho.js?m=1610363240h'></script>

	<script>
		// Initialize and attach hovercards to all gravatars
		( function() {
			function init() {
				if ( typeof Gravatar === 'undefined' ) {
					return;
				}

				if ( typeof Gravatar.init !== 'function' ) {
					return;
				}

				Gravatar.profile_cb = function ( hash, id ) {
					WPGroHo.syncProfileData( hash, id );
				};

				Gravatar.my_hash = WPGroHo.my_hash;
				Gravatar.init( 'body', '#wp-admin-bar-my-account' );
			}

			if ( document.readyState !== 'loading' ) {
				init();
			} else {
				document.addEventListener( 'DOMContentLoaded', init );
			}
		} )();
	</script>

		<div style="display:none">
	<div class="grofile-hash-map-ee20c28be7254efecd50ce7a471b4876">
	</div>
	<div class="grofile-hash-map-654f2e5de48f2d4d8759b40f34f75429">
	</div>
	<div class="grofile-hash-map-9a3bf4aba89a3d8f593ec29e75e5884a">
	</div>
	<div class="grofile-hash-map-5f2716777689db5a800e9cab12812f93">
	</div>
	<div class="grofile-hash-map-29fbfeca3cab8dd855ac7b014bd44a0f">
	</div>
	<div class="grofile-hash-map-9d20a9b2d1b5b2083cf68d90e5942611">
	</div>
	<div class="grofile-hash-map-9d20a9b2d1b5b2083cf68d90e5942611">
	</div>
	<div class="grofile-hash-map-1b33e4065ce33ca9873fea6074682a5d">
	</div>
	<div class="grofile-hash-map-6d5add2f37f59fe8f3e5a5e8e7a851ab">
	</div>
	<div class="grofile-hash-map-90ff6fa97674f4fc3462f2a5fb9f7d20">
	</div>
	<div class="grofile-hash-map-6f1b77a75fff8d1cca1e752ff327a2b2">
	</div>
	<div class="grofile-hash-map-d338954acc28dc4cc2100f737c41f890">
	</div>
	<div class="grofile-hash-map-38160b1f52d67ae219af39b6c9c11d4b">
	</div>
	<div class="grofile-hash-map-c780c247d39bf1b2583a138602ad81e7">
	</div>
	<div class="grofile-hash-map-d32f9c43d730bec85b7021a80ad492ac">
	</div>
	<div class="grofile-hash-map-9e68e1302ac10ee601644143401301cc">
	</div>
	</div>
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" ><defs><filter id="wp-duotone-dark-grayscale"><feColorMatrix type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 0 0 0 1 0 " /><feComponentTransfer color-interpolation-filters="sRGB" ><feFuncR type="table" tableValues="0 0.49803921568627" /><feFuncG type="table" tableValues="0 0.49803921568627" /><feFuncB type="table" tableValues="0 0.49803921568627" /></feComponentTransfer></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" ><defs><filter id="wp-duotone-grayscale"><feColorMatrix type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 0 0 0 1 0 " /><feComponentTransfer color-interpolation-filters="sRGB" ><feFuncR type="table" tableValues="0 1" /><feFuncG type="table" tableValues="0 1" /><feFuncB type="table" tableValues="0 1" /></feComponentTransfer></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" ><defs><filter id="wp-duotone-purple-yellow"><feColorMatrix type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 0 0 0 1 0 " /><feComponentTransfer color-interpolation-filters="sRGB" ><feFuncR type="table" tableValues="0.54901960784314 0.98823529411765" /><feFuncG type="table" tableValues="0 1" /><feFuncB type="table" tableValues="0.71764705882353 0.25490196078431" /></feComponentTransfer></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" ><defs><filter id="wp-duotone-blue-red"><feColorMatrix type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 0 0 0 1 0 " /><feComponentTransfer color-interpolation-filters="sRGB" ><feFuncR type="table" tableValues="0 1" /><feFuncG type="table" tableValues="0 0.27843137254902" /><feFuncB type="table" tableValues="0.5921568627451 0.27843137254902" /></feComponentTransfer></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" ><defs><filter id="wp-duotone-midnight"><feColorMatrix type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 0 0 0 1 0 " /><feComponentTransfer color-interpolation-filters="sRGB" ><feFuncR type="table" tableValues="0 0" /><feFuncG type="table" tableValues="0 0.64705882352941" /><feFuncB type="table" tableValues="0 1" /></feComponentTransfer></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" ><defs><filter id="wp-duotone-magenta-yellow"><feColorMatrix type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 0 0 0 1 0 " /><feComponentTransfer color-interpolation-filters="sRGB" ><feFuncR type="table" tableValues="0.78039215686275 1" /><feFuncG type="table" tableValues="0 0.94901960784314" /><feFuncB type="table" tableValues="0.35294117647059 0.47058823529412" /></feComponentTransfer></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" ><defs><filter id="wp-duotone-purple-green"><feColorMatrix type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 0 0 0 1 0 " /><feComponentTransfer color-interpolation-filters="sRGB" ><feFuncR type="table" tableValues="0.65098039215686 0.40392156862745" /><feFuncG type="table" tableValues="0 1" /><feFuncB type="table" tableValues="0.44705882352941 0.4" /></feComponentTransfer></filter></defs></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 0 0" width="0" height="0" focusable="false" role="none" style="visibility: hidden; position: absolute; left: -9999px; overflow: hidden;" ><defs><filter id="wp-duotone-blue-orange"><feColorMatrix type="matrix" values=" .299 .587 .114 0 0 .299 .587 .114 0 0 .299 .587 .114 0 0 0 0 0 1 0 " /><feComponentTransfer color-interpolation-filters="sRGB" ><feFuncR type="table" tableValues="0.098039215686275 1" /><feFuncG type="table" tableValues="0 0.66274509803922" /><feFuncB type="table" tableValues="0.84705882352941 0.41960784313725" /></feComponentTransfer></filter></defs></svg>
<script>
window.addEventListener( "load", function( event ) {
	var link = document.createElement( "link" );
	link.href = "https://s0.wp.com/wp-content/mu-plugins/actionbar/actionbar.css?v=20210915";
	link.type = "text/css";
	link.rel = "stylesheet";
	document.head.appendChild( link );

	var script = document.createElement( "script" );
	script.src = "https://s0.wp.com/wp-content/mu-plugins/actionbar/actionbar.js?v=20211021";
	script.defer = true;
	document.body.appendChild( script );
} );
</script>

	
	<script type="text/javascript">
		window.WPCOM_sharing_counts = {"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/":50};
	</script>
					<div id="sharing_email" style="display: none;">
		<form action="/2011/03/17/parallelism-is-not-concurrency/" method="post">
			<label for="target_email">Send to Email Address</label>
			<input type="email" name="target_email" id="target_email" value="" />

			
				<label for="source_name">Your Name</label>
				<input type="text" name="source_name" id="source_name" value="" />

				<label for="source_email">Your Email Address</label>
				<input type="email" name="source_email" id="source_email" value="" />

						<input type="text" id="jetpack-source_f_name" name="source_f_name" class="input" value="" size="25" autocomplete="off" title="This field is for validation and should not be changed" />
			
			<div
				class="g-recaptcha"
				data-sitekey="6LcmyE0UAAAAALID28yVNg7pFCodGaArJzHitez_"
				data-theme="light"
				data-type="image"
				data-tabindex="0"
				data-lazy="true"
				data-url="https://www.google.com/recaptcha/api.js?hl=en"></div>
			
			<img style="float: right; display: none" class="loading" src="https://s0.wp.com/wp-content/mu-plugins/post-flair/sharing/images/loading.gif" alt="loading" width="16" height="16" />
			<input type="submit" value="Send Email" class="sharing_send" />
			<a rel="nofollow" href="#cancel" class="sharing_cancel" role="button">Cancel</a>

			<div class="errors errors-1" style="display: none;">
				Post was not sent - check your email addresses!			</div>

			<div class="errors errors-2" style="display: none;">
				Email check failed, please try again			</div>

			<div class="errors errors-3" style="display: none;">
				Sorry, your blog cannot share posts by email.			</div>
		</form>
	</div>
<script id='comment-like-js-extra'>
var comment_like_text = {"loading":"Loading..."};
</script>
<script crossorigin='anonymous' type='text/javascript' src='https://s0.wp.com/_static/??-eJyFkFkOAiEQRC8k03FN/DCehYGKNgMMsoh6ejEaEzUZv4Cqel0dqAahRp/hM5lEGmdWCJfOpBl9WuZUEK+vo2N/ZtS/MYMcpBpEROIbvuOuiGDLgX0iywMSNajgKL22iBNhNTrXJPGEzIPuKVUOUw0/0IcwAVbWB+REKM0dB4awslKGC1ZmfOkTc6R27EUvIzmZMmK7iRzb77zL2Stb9HO79oTrobsGNX/vdvPNYrNaLNfbtbkDGNyjSA=='></script>
<script id='crowdsignal-rating-js-before'>
<!--//--><![CDATA[//><!--
PDRTJS_settings_4111818_post_50={"id":4111818,"unique_id":"wp-post-50","title":"Parallelism%20Is%20Not%26nbsp%3BConcurrency","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/","item_id":"_post_50"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4111818_post_50 == 'undefined' ){PDRTJS_4111818_post_50 = new PDRTJS_RATING( PDRTJS_settings_4111818_post_50 );}}PDRTJS_settings_4246534_comm_3437={"id":4246534,"unique_id":"wp-comment-3437","title":"%26%23091%3B%26%238230%3B%26%23093%3B%20last%20thing%20I%20want%20to%20illustrate%20is%20a%20difference%20between%20parallelism%20and%20concurrency.%20This%20topic%20is%20well%20covered%2C%20and%20there%20is%20a%20great%20talk%20by%20Rob%20Pike%20on%20the%20subject.%20One%20of%20the%20%23mustwa...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-3437","item_id":"_comm_3437"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_3437 == 'undefined' ){PDRTJS_4246534_comm_3437 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_3437 );}}PDRTJS_settings_4246534_comm_3202={"id":4246534,"unique_id":"wp-comment-3202","title":"%26%23091%3B%26%238230%3B%26%23093%3B%20Rob%20Pike%23mustwatch1%20%26%23091%3B%26%238230%3B%26%23093%3B...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-3202","item_id":"_comm_3202"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_3202 == 'undefined' ){PDRTJS_4246534_comm_3202 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_3202 );}}PDRTJS_settings_4246534_comm_3157={"id":4246534,"unique_id":"wp-comment-3157","title":"%26%23091%3B%26%238230%3B%26%23093%3B%20https%3A%2F%2Fexistentialtype.wordpress.com%2F2011%2F03%2F17%2Fparallelism%26%238230%3B%20%26%23091%3B%26%238230%3B%26%23093%3B...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-3157","item_id":"_comm_3157"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_3157 == 'undefined' ){PDRTJS_4246534_comm_3157 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_3157 );}}PDRTJS_settings_4246534_comm_3152={"id":4246534,"unique_id":"wp-comment-3152","title":"%26%23091%3B%26%238230%3B%26%23093%3B%20%20%20%20concurrency%20%20%20%20%2C%20%20%20%20%20%20%20%20%26%23091%3B%26%238230%3B%26%23093%3B...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-3152","item_id":"_comm_3152"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_3152 == 'undefined' ){PDRTJS_4246534_comm_3152 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_3152 );}}PDRTJS_settings_4246534_comm_3143={"id":4246534,"unique_id":"wp-comment-3143","title":"%26%23091%3B%26%238230%3B%26%23093%3B%20functional%20composition%20with%20first-class%20functions%20can%20express%20the%20depth%20in%20the%20parallelism%20by%20separating%20out%20the%20independent%20%26%23091%3B%26%238230%3B%26%23093%3B...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-3143","item_id":"_comm_3143"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_3143 == 'undefined' ){PDRTJS_4246534_comm_3143 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_3143 );}}PDRTJS_settings_4246534_comm_3065={"id":4246534,"unique_id":"wp-comment-3065","title":"Reblogged%20this%20on%20%26lt%3Ba%20href%3D%26quot%3Bhttp%3A%2F%2Fhackintoshrao.com%2F2015%2F05%2F27%2Fparallelism-is-not-concurrency%2F%26quot%3B%20rel%3D%26quot%3Bnofollow%26quot%3B%26gt%3Bhackintoshrao%26lt%3B%2Fa%26gt%3B....","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-3065","item_id":"_comm_3065"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_3065 == 'undefined' ){PDRTJS_4246534_comm_3065 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_3065 );}}PDRTJS_settings_4246534_comm_2963={"id":4246534,"unique_id":"wp-comment-2963","title":"%26%23091%3B%26%238230%3B%26%23093%3B%20functional%20composition%20with%20first-class%20functions%20can%20express%20the%20depth%20in%20the%20parallelism%20by%20separating%20out%20the%20independent%20%26%23091%3B%26%238230%3B%26%23093%3B...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-2963","item_id":"_comm_2963"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_2963 == 'undefined' ){PDRTJS_4246534_comm_2963 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_2963 );}}PDRTJS_settings_4246534_comm_2957={"id":4246534,"unique_id":"wp-comment-2957","title":"%26%23091%3B%26%238230%3B%26%23093%3B%20functional%20composition%20with%20first-class%20functions%20can%20express%20the%20depth%20in%20the%20parallelism%20by%20separating%20out%20the%20independent%20%26%23091%3B%26%238230%3B%26%23093%3B...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-2957","item_id":"_comm_2957"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_2957 == 'undefined' ){PDRTJS_4246534_comm_2957 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_2957 );}}PDRTJS_settings_4246534_comm_2943={"id":4246534,"unique_id":"wp-comment-2943","title":"%26%23091%3B%26%238230%3B%26%23093%3B%20functional%20composition%20with%20first-class%20functions%20can%20express%20the%20depth%20in%20the%20parallelism%20by%20separating%20out%20the%20independent%20%26%23091%3B%26%238230%3B%26%23093%3B...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-2943","item_id":"_comm_2943"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_2943 == 'undefined' ){PDRTJS_4246534_comm_2943 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_2943 );}}PDRTJS_settings_4246534_comm_2919={"id":4246534,"unique_id":"wp-comment-2919","title":"%26%23091%3B%26%238230%3B%26%23093%3B%20C1ABAB%20%26%23091%3B%26%238230%3B%26%23093%3B...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-2919","item_id":"_comm_2919"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_2919 == 'undefined' ){PDRTJS_4246534_comm_2919 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_2919 );}}PDRTJS_settings_4246534_comm_2810={"id":4246534,"unique_id":"wp-comment-2810","title":"%26%23091%3B%26%238230%3B%26%23093%3B%20A%20and%20B%20can%20be%20broken%20down%20into%20analyzingA%20and%20analyzing%20B.%20Researchers%20have%20also%20frequentlyargued%20that%20functional%20programdesign%20makes%20it%20fundamentally%20easier%20to%20exploit%20%26%23091%3B%26%238230%3B%26%23093%3B...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-2810","item_id":"_comm_2810"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_2810 == 'undefined' ){PDRTJS_4246534_comm_2810 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_2810 );}}PDRTJS_settings_4246534_comm_1297={"id":4246534,"unique_id":"wp-comment-1297","title":"Thanks%20for%20this%20post.%20It%20is%20powerful%20to%20be%20able%20to%20identify%20and%20express%20deterministic%20algorithms%20that%20are%20side%20effect%20free%20and%20can%20be%20automatically%20consumed%20by%20the%20compiler%20or%20processor%20and%20scale...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1297","item_id":"_comm_1297"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1297 == 'undefined' ){PDRTJS_4246534_comm_1297 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1297 );}}PDRTJS_settings_4246534_comm_1299={"id":4246534,"unique_id":"wp-comment-1299","title":"The%20short%20response%20is%20to%20suggest%20that%20you%20read%20my%20PFPL.%20%20We%20are%20largely%20in%20agreement.%20%20In%20my%20view%20concurrency%20is%20about%20non-deterministic%20composition%20of%20programs%2C%20and%20has%20zero%20to%20do%20with%20paralleli...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1299","item_id":"_comm_1299"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1299 == 'undefined' ){PDRTJS_4246534_comm_1299 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1299 );}}PDRTJS_settings_4246534_comm_1301={"id":4246534,"unique_id":"wp-comment-1301","title":"As%20you%20say%2C%20we%20are%20largely%20in%20agreement%2C%20its%20just%20the%20use%20of%20the%20terms%20that%20I%20have%20difficulty%20with.%20From%20being%20in%20the%20trenches%20of%20multi-threaded%20programming%20I%20quickly%20learnt%20that%20giving%20up%20some%20a...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1301","item_id":"_comm_1301"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1301 == 'undefined' ){PDRTJS_4246534_comm_1301 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1301 );}}PDRTJS_settings_4246534_comm_1300={"id":4246534,"unique_id":"wp-comment-1300","title":"It%20bothers%20me%20that%20so%20many%20people%20conflate%20concurrency%20with%20non-determinism.%20These%20are%20orthogonal%20properties.%20We%20can%20have%20a%20non-deterministic%2C%20fully%20sequential%20computation%20simply%20by%20asking%20for%20a%20...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1300","item_id":"_comm_1300"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1300 == 'undefined' ){PDRTJS_4246534_comm_1300 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1300 );}}PDRTJS_settings_4246534_comm_1304={"id":4246534,"unique_id":"wp-comment-1304","title":"Well%2C%20please%20see%20PFPL%20and%20agree%20to%20disagree.%20...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1304","item_id":"_comm_1304"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1304 == 'undefined' ){PDRTJS_4246534_comm_1304 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1304 );}}PDRTJS_settings_4246534_comm_1305={"id":4246534,"unique_id":"wp-comment-1305","title":"PFPL%20describes%20only%20one%20model%20for%20concurrency%2C%20plus%20an%20adaptation%20of%20this%20model%20to%20an%20Algol.%20Are%20you%20attempting%20to%20generalize%20from%20a%20single%20example%20of%20concurrency%3F%20That%20seems%20rather%20premature.%20%26quot%3BA...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1305","item_id":"_comm_1305"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1305 == 'undefined' ){PDRTJS_4246534_comm_1305 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1305 );}}PDRTJS_settings_4246534_comm_1306={"id":4246534,"unique_id":"wp-comment-1306","title":"I%20am%20using%20the%20pi%20calculus%2C%20a%20general%20model%20of%20concurrency%2C%20as%20a%20basis%20for%20what%20concurrency%20means....","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1306","item_id":"_comm_1306"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1306 == 'undefined' ){PDRTJS_4246534_comm_1306 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1306 );}}PDRTJS_settings_4246534_comm_1310={"id":4246534,"unique_id":"wp-comment-1310","title":"I%20don%26%23039%3Bt%20agree%20with%20you%2C%20as%20I%20I%26%23039%3Bve%20explained%20here%20and%20in%20PFPL....","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1310","item_id":"_comm_1310"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1310 == 'undefined' ){PDRTJS_4246534_comm_1310 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1310 );}}PDRTJS_settings_4246534_comm_1311={"id":4246534,"unique_id":"wp-comment-1311","title":"Where%20do%20you%20explain%20your%20disagreement%20in%20PFPL%3F%20PFPL%20describes%20one%20general%20model%20of%20concurrency%20%28Milner%26%23039%3Bs%20process%20calculus%29%20but%2C%20as%20far%20as%20I%20can%20tell%2C%20PFPL%20does%20not%20present%20an%20argument%20that%20%26lt%3Bi%26gt%3Bev...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1311","item_id":"_comm_1311"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1311 == 'undefined' ){PDRTJS_4246534_comm_1311 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1311 );}}PDRTJS_settings_4246534_comm_1313={"id":4246534,"unique_id":"wp-comment-1313","title":"it%26%23039%3Bs%20implicit%20in%20the%20decomposition%20of%20the%20pi%20calculus%20into%20non-deterministic%20composition%2C%20plus%20a%20bunch%20of%20stuff%2C%20such%20as%20channels%2C%20that%20have%20not%20much%20to%20do%20with%20concurrency%20%28they%20are%20assignables%2C...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1313","item_id":"_comm_1313"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1313 == 'undefined' ){PDRTJS_4246534_comm_1313 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1313 );}}PDRTJS_settings_4246534_comm_1316={"id":4246534,"unique_id":"wp-comment-1316","title":"Decomposing%20pi%20calculus%20to%20find%20the%20operator%20of%20concurrency%20seems%20an%20odd%20sort%20of%20reductionism%2C%20rather%20like%20trying%20to%20tear%20apart%20a%20bird%20to%20identify%20a%20flight%20bone.I%20do%20believe%20the%20elements%20you%26%23039%3Bre%20d...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1316","item_id":"_comm_1316"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1316 == 'undefined' ){PDRTJS_4246534_comm_1316 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1316 );}}PDRTJS_settings_4246534_comm_1308={"id":4246534,"unique_id":"wp-comment-1308","title":"In%20my%20experience%2C%20most%20concurrency%20models%20allow%20you%20to%20implement%20one%20in%20another%20in%20practice.%20A%20proof%20of%20their%20equivalence%20is%20much%20harder%2C%20but%20you%20can%20often%20get%20the%20same%20effect%20from%20one%20in%20another...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1308","item_id":"_comm_1308"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1308 == 'undefined' ){PDRTJS_4246534_comm_1308 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1308 );}}PDRTJS_settings_4246534_comm_1312={"id":4246534,"unique_id":"wp-comment-1312","title":"%26quot%3BThe%20Pi%20calculus%20is%2C%20to%20me%2C%20general%20in%20same%20sense%20that%20Lambda-calc%20is%26quot%3BIt%26%23039%3Bs%20certainly%20%26%23039%3Bgeneral%26%23039%3B%2C%20but%20that%20seems%20logically%20irrelevant%20to%20the%20present%20argument.%20Consider%3A%20There%20are%20many%20%26%23039%3Bgeneral%26%23039%3B%20mod...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1312","item_id":"_comm_1312"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1312 == 'undefined' ){PDRTJS_4246534_comm_1312 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1312 );}}PDRTJS_settings_4246534_comm_1314={"id":4246534,"unique_id":"wp-comment-1314","title":"define%20orthogonal.%20%20it%26%23039%3Bs%20a%20pretense%20word%20that%20has%20no%20meaning....","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1314","item_id":"_comm_1314"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1314 == 'undefined' ){PDRTJS_4246534_comm_1314 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1314 );}}PDRTJS_settings_4246534_comm_1315={"id":4246534,"unique_id":"wp-comment-1315","title":"Here%2C%20I%20use%20the%20word%20%26%23039%3Borthogonal%26%23039%3B%20to%20describe%20variables%20that%20may%20vary%20independently%2C%20even%20if%20they%20don%26%23039%3Bt%20in%20practice.%20For%20example%3A%20the%20color%20of%20a%20car%20is%20orthogonal%20to%20the%20shape%20of%20the%20car%2C%20even%20th...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1315","item_id":"_comm_1315"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1315 == 'undefined' ){PDRTJS_4246534_comm_1315 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1315 );}}PDRTJS_settings_4246534_comm_1229={"id":4246534,"unique_id":"wp-comment-1229","title":"%26quot%3Blet%20val%20%28xsl%2C%20xsg%29%20%3D%20split%20xs%26quot%3BThat%20has%20linear%20running%20time%2C%20so%20your%20parallel%20algorithm%20takes%20N%2BN%2F2%20%2BN%2F4%2B...%3D2N.%20Which%20is%20a%20log%20N%20improvement%20over%20the%20sequential%20time.%20That%26%23039%3Bs%20kinda%20bad.%20I%20think%20I...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1229","item_id":"_comm_1229"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1229 == 'undefined' ){PDRTJS_4246534_comm_1229 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1229 );}}PDRTJS_settings_4246534_comm_1230={"id":4246534,"unique_id":"wp-comment-1230","title":"This%20can%20also%20be%20done%20in%20lg%20time%20in%20functional%20languages%3B%20just%20don%26%23039%3Bt%20use%20a%20list.%20%20Nothing%20whatever%20to%20do%20with%20imperative....","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1230","item_id":"_comm_1230"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1230 == 'undefined' ){PDRTJS_4246534_comm_1230 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1230 );}}PDRTJS_settings_4246534_comm_1236={"id":4246534,"unique_id":"wp-comment-1236","title":"So%20why%20don%26%23039%3Bt%20you%20give%20that%20code%3F%20I%20suspect%20it%20looks%20far%20less%20elegant%20than%20what%20you%26%23039%3Bre%20displaying%20here....","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1236","item_id":"_comm_1236"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1236 == 'undefined' ){PDRTJS_4246534_comm_1236 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1236 );}}PDRTJS_settings_4246534_comm_1237={"id":4246534,"unique_id":"wp-comment-1237","title":"You%20can%20represent%20a%20sequence%20as%20a%20tree%20for%20which%20surgery%20takes%20logarithmic%20time.%20%20And%2C%20as%20a%20bonus%2C%20it%20does%20it%20with%20a%20persistent%2C%20rather%20than%20a%20more%20restrictive%20ephemeral%2C%20data%20structure%2C%20and%20henc...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1237","item_id":"_comm_1237"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1237 == 'undefined' ){PDRTJS_4246534_comm_1237 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1237 );}}PDRTJS_settings_4246534_comm_1238={"id":4246534,"unique_id":"wp-comment-1238","title":"Ever%20heard%20of%20caches%3F%20TLB%3F%20One%20of%20the%20reasons%20that%20functional%20languages%20will%20never%20be%20relevant%20in%20practice%20is%20that%20their%20practitioners%20have%20no%20concept%20of%20efficiency%20other%20than%20asymptotic.%20In%20the%20...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1238","item_id":"_comm_1238"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1238 == 'undefined' ){PDRTJS_4246534_comm_1238 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1238 );}}PDRTJS_settings_4246534_comm_1239={"id":4246534,"unique_id":"wp-comment-1239","title":"Funnily%20enough%2C%20Guy%20Blelloch%20and%20I%20wrote%20a%20paper%20on%20just%20this%20topic%20published%20at%20POPL%202013%2C%20called%20%26quot%3BCache%20and%20I%2FO%20Efficient%20Functional%20Algorithms%26quot%3B.%20%20I%20suggest%20you%20have%20a%20look%20at%20that%2C%20and%20at%20the%20...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1239","item_id":"_comm_1239"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1239 == 'undefined' ){PDRTJS_4246534_comm_1239 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1239 );}}PDRTJS_settings_4246534_comm_1240={"id":4246534,"unique_id":"wp-comment-1240","title":"I%26%23039%3Bll%20look%20for%20your%20paper.%20Just%20to%20motivate%20me%3A%20what%20percentage%20of%20peak%20performance%20do%20you%20get%20on%20matrix-matrix%20multiplication%3F%20Do%20you%20do%20better%20than%20the%20Fortran%20reference%3F...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1240","item_id":"_comm_1240"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1240 == 'undefined' ){PDRTJS_4246534_comm_1240 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1240 );}}PDRTJS_settings_4246534_comm_1241={"id":4246534,"unique_id":"wp-comment-1241","title":"Undoubtedly%20not%20on%20dense%20matrix%20multiplication%2C%20but%20I%20don%26%23039%3Bt%20have%20figures%20to%20hand.%20%20But%20that%26%23039%3Bs%20hardly%20the%20point.%20%20The%20algorithms%20that%20people%20wish%20to%20consider%20these%20days%20are%20far%20more%20sophisticated%20...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1241","item_id":"_comm_1241"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1241 == 'undefined' ){PDRTJS_4246534_comm_1241 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1241 );}}PDRTJS_settings_4246534_comm_1242={"id":4246534,"unique_id":"wp-comment-1242","title":"HPF%20was%20dead%20on%20arrival%20because%20compiler%20writers%20don%26%23039%3Bt%20understand%20caches%20and%20the%20cost%20of%20memory%20copies.%20Its%20performance%20was%20a%20fraction%20of%20what%20the%20Fortran%20programmers%20were%20used%20to%2C%20so%20they%20never%20...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1242","item_id":"_comm_1242"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1242 == 'undefined' ){PDRTJS_4246534_comm_1242 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1242 );}}PDRTJS_settings_4246534_comm_1243={"id":4246534,"unique_id":"wp-comment-1243","title":"Chakravarty%20is%20the%20best%20person%20to%20ask%20about%20current%20performance%20figures.%20%20By%20%26quot%3Bvectorization%26quot%3B%20I%20mean%20trying%20to%20turn%20DO%20loops%20into%20vector%20operations%3B%20it%26%23039%3Bs%20an%20artifact%20of%20one-by-one%20processing.%20%20Com...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1243","item_id":"_comm_1243"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1243 == 'undefined' ){PDRTJS_4246534_comm_1243 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1243 );}}PDRTJS_settings_4246534_comm_1287={"id":4246534,"unique_id":"wp-comment-1287","title":"%26quot%3BCompilers%20for%20parallel%20platforms%20make%20full%20use%20of%20available%20parallel%20instructions%20sets%2C%20including%20coprocessors.%26quot%3B%20You%20wish.%20So%20why%20are%20we%20still%20unrolling%20loops%20so%20that%20the%20compiler%20will%20finally%20d...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1287","item_id":"_comm_1287"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1287 == 'undefined' ){PDRTJS_4246534_comm_1287 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1287 );}}PDRTJS_settings_4246534_comm_1288={"id":4246534,"unique_id":"wp-comment-1288","title":"I%20meant%20compilers%20for%20functional%20languages%20do%20so.%20%20There%20are%20no%20loops%20to%20unroll%2C%20that%26%23039%3Bs%20the%20whole%20point....","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1288","item_id":"_comm_1288"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1288 == 'undefined' ){PDRTJS_4246534_comm_1288 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1288 );}}PDRTJS_settings_4246534_comm_1289={"id":4246534,"unique_id":"wp-comment-1289","title":"But%20a%20few%20comments%20back%20you%20were%20proposing%20to%20implement%20a%20list%20as%20a%20tree%20to%20make%20splitting%20linear.%20How%20are%20you%20going%20to%20apply%20vector%20instructions%20to%20that%3F%20Never%20mind%20that%20you%26%23039%3Bre%20probably%20losing%207...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-1289","item_id":"_comm_1289"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_1289 == 'undefined' ){PDRTJS_4246534_comm_1289 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_1289 );}}PDRTJS_settings_4246534_comm_183={"id":4246534,"unique_id":"wp-comment-183","title":"%26%23091%3B...%26%23093%3B%20adding%20lamda%20expressions%20to%20the%20language%2C%20Robert%20Harper%20from%20Carnegie%20Mellon%20University%20argues%20that%20functional%20programming%20can%20hide%20concurrency%20complexities%20from%20the%20programmer%20and%20allow%20th...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-183","item_id":"_comm_183"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_183 == 'undefined' ){PDRTJS_4246534_comm_183 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_183 );}}PDRTJS_settings_4246534_comm_169={"id":4246534,"unique_id":"wp-comment-169","title":"%26lt%3Bblockquote%26gt%3BNow%20I%20can%20hear%20you%20object%2C%20but%20isnt%20concurrency%20%26lt%3Bi%26gt%3Brequired%26lt%3B%2Fi%26gt%3B%20to%20implement%20parallelism%3F%26lt%3B%2Fblockquote%26gt%3BNope.%20%20My%20first%20objections%20is%20%26quot%3Bbut%20isn%26%23039%3Bt%20parallelism%20%26lt%3Bi%26gt%3Brequired%26lt%3B%2Fi%26gt%3B%20to%20implement...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-169","item_id":"_comm_169"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_169 == 'undefined' ){PDRTJS_4246534_comm_169 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_169 );}}PDRTJS_settings_4246534_comm_178={"id":4246534,"unique_id":"wp-comment-178","title":"John%2CConcurrency%20is%20about%20externally%20visible%20behavior.%20%20Parallelism%20adds%20no%20expressive%20power%20to%20a%20language.%20%20The%20time%20a%20parallel%20operation%20takes%20to%20execute%20is%20whatever%20time%20it%20starts%20until%20it%20pro...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-178","item_id":"_comm_178"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_178 == 'undefined' ){PDRTJS_4246534_comm_178 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_178 );}}PDRTJS_settings_4246534_comm_179={"id":4246534,"unique_id":"wp-comment-179","title":"As%20I%20understand%20it%2C%20the%20author%20views%20parallelism%20as%20an%20algorithmic%20or%20complexity-oriented%20concept.%20You%20can%20take%20any%20algorithm%20and%20analyze%20in%20terms%20of%20its%20efficiency%20in%20terms%20of%20parallelism.%20To%20do...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-179","item_id":"_comm_179"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_179 == 'undefined' ){PDRTJS_4246534_comm_179 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_179 );}}PDRTJS_settings_4246534_comm_65={"id":4246534,"unique_id":"wp-comment-65","title":"%26%23091%3B...%26%23093%3B%20for%20first-year%20students%20at%20Carnegie%20Mellon.%20Apart%20from%20parallelism%2C%20wbich%20I%26%238217%3Bve%20already%20discussed%2C%20we%20are%20placing%20a%20strong%20emphasis%20on%20verification%20and%20proof%20as%20tools%20for%20the%20practicin...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-65","item_id":"_comm_65"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_65 == 'undefined' ){PDRTJS_4246534_comm_65 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_65 );}}PDRTJS_settings_4246534_comm_56={"id":4246534,"unique_id":"wp-comment-56","title":"I%20wrote%20a%20brief%20%28some%20would%20say%20cryptic%29%20note%20of%20some%20experimentation%20I%20did%20in%20this%20area%20-%20particularly%20a%20functional%20language%20based%20approach%20to%20achieve%20parallel%20execution%20of%20large%20computations%20wi...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-56","item_id":"_comm_56"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_56 == 'undefined' ){PDRTJS_4246534_comm_56 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_56 );}}PDRTJS_settings_4246534_comm_51={"id":4246534,"unique_id":"wp-comment-51","title":"Do%20you%20count%20a%20memorization%20as%20a%20functional%20programming%20primitive%3F%20%20Without%20it%2C%20some%20algorithms%20will%20be%20exponentially%20slower.I%20don%26%23039%3Bt%20think%20you%20can%20implement%20memorization%20without%20concurrency....","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-51","item_id":"_comm_51"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_51 == 'undefined' ){PDRTJS_4246534_comm_51 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_51 );}}PDRTJS_settings_4246534_comm_85={"id":4246534,"unique_id":"wp-comment-85","title":"If%20state%20is%20the%20same%20as%20concurrency%2C%20you%26%23039%3Bre%20right%2C%20but%20ordinarily%20people%20don%26%23039%3Bt%20think%20of%20it%20that%20way.%20%20You%20can%20have%20memoization%20or%20not%20according%20to%20your%20selection%20of%20types.%20%20There%20is%20no%20reason%20to%20...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-85","item_id":"_comm_85"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_85 == 'undefined' ){PDRTJS_4246534_comm_85 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_85 );}}PDRTJS_settings_4246534_comm_29={"id":4246534,"unique_id":"wp-comment-29","title":"%26%23091%3B...%26%23093%3B%20%20Parallelism%20is%20not%20concurrency%20In%20an%20earlier%20post%20I%20mentioned%20that%20one%20goal%20of%20the%20new%20introductory%20curriculum%20at%20Carnegie%20Mellon%20is%20to%20teach%20%26%23091%3B...%26%23093%3B%20%26%23091%3B...%26%23093%3B...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-29","item_id":"_comm_29"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_29 == 'undefined' ){PDRTJS_4246534_comm_29 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_29 );}}PDRTJS_settings_4246534_comm_25={"id":4246534,"unique_id":"wp-comment-25","title":"%26%23091%3B...%26%23093%3B%20Parallelism%20is%20not%20concurrency%20%20Existential%20Type%20Useful%20read%20RT%3A%20%40tunixman%20Parallelism%20is%20not%20concurrency%20%20Existential%20Type%20http%3A%2F%2Fbit.ly%2Ff5HhMF%20%28tags%3A%20via%3Apackrati.us%29%20%26%23091%3B...%26%23093%3B...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-25","item_id":"_comm_25"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_25 == 'undefined' ){PDRTJS_4246534_comm_25 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_25 );}}PDRTJS_settings_4246534_comm_20={"id":4246534,"unique_id":"wp-comment-20","title":"There%20are%20many%20models%20for%20deterministic%20concurrency%3A%20temporal%20logic%20programming%2C%20functional%20reactive%20programming%2C%20future%20passing%20with%20single%20assignment%20variables%20%28promoted%20heavily%20by%20Peter%20Van%20Ro...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-20","item_id":"_comm_20"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_20 == 'undefined' ){PDRTJS_4246534_comm_20 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_20 );}}PDRTJS_settings_4246534_comm_118={"id":4246534,"unique_id":"wp-comment-118","title":"I%20believe%20you%20are%20conflating%20nondeterminism%20with%20%26%23039%3Bobservable%20non-determinism%26%23039%3B.%20Since%20you%20mentioned%20PvR%2C%20check%20out%20CTM%20section%204.1%20%28page%20238%29.Bearing%20this%20distinction%20in%20mind%2C%20dataflow%20concurrency...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-118","item_id":"_comm_118"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_118 == 'undefined' ){PDRTJS_4246534_comm_118 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_118 );}}PDRTJS_settings_4246534_comm_131={"id":4246534,"unique_id":"wp-comment-131","title":"The%20relevant%20issue%20is%20whether%20nondeterminism%20exists%20in%20the%20semantics.%20PvR%20was%20working%20with%20Oz%20semantics%2C%20so%20he%20was%20stuck%20in%20the%20rather%20precarious%20position%20of%20explaining%20%26%23039%3Byes%2C%20Oz%20threads%20can%20be%20in...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-131","item_id":"_comm_131"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_131 == 'undefined' ){PDRTJS_4246534_comm_131 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_131 );}}PDRTJS_settings_4246534_comm_19={"id":4246534,"unique_id":"wp-comment-19","title":"I%20think%20I%20understand%20the%20argument%20you%26%23039%3Bre%20making%2C%20but%20I%20would%20argue%20it%26%23039%3Bs%20not%20as%20cut-and-dried%20as%20you%20suggest.%20%20It%26%23039%3Bs%20true%20that%20concurrency%20is%20primarily%20about%20non-determinism%2C%20and%20there%20exist%20useful...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-19","item_id":"_comm_19"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_19 == 'undefined' ){PDRTJS_4246534_comm_19 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_19 );}}PDRTJS_settings_4246534_comm_39={"id":4246534,"unique_id":"wp-comment-39","title":"Let%20me%20counter%20your%20argument%20with%20the%20following%3A%20You%20surely%20know%20Google%26%23039%3Bs%20Sawzall%20language%20for%20map-reduce%20queries.%20Where%20in%20map-reduce%20do%20you%20deploy%20concurrency%20to%20solve%20your%20problem%3F%20Where%20is%20th...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-39","item_id":"_comm_39"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_39 == 'undefined' ){PDRTJS_4246534_comm_39 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_39 );}}PDRTJS_settings_4246534_comm_89={"id":4246534,"unique_id":"wp-comment-89","title":"Sawzall%2C%20and%20its%20derivatives%2C%20well%20illustrate%20my%20point....","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-89","item_id":"_comm_89"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_89 == 'undefined' ){PDRTJS_4246534_comm_89 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_89 );}}PDRTJS_settings_4246534_comm_11={"id":4246534,"unique_id":"wp-comment-11","title":"I%20am%20a%20%26quot%3Blanguage-based%20model%20of%20computation%26quot%3B%20fellow%20traveler%2C%20and%20I%20agree%20that%20functional%20programming%20is%20a%20great%20basis%20for%20parallelism.However%2C%20I%20have%20to%20disagree%20with%20your%20characterization%20that%20...","permalink":"https:\/\/existentialtype.wordpress.com\/2011\/03\/17\/parallelism-is-not-concurrency\/#comment-11","item_id":"_comm_11"}; if ( typeof PDRTJS_RATING !== 'undefined' ){if ( typeof PDRTJS_4246534_comm_11 == 'undefined' ){PDRTJS_4246534_comm_11 = new PDRTJS_RATING( PDRTJS_settings_4246534_comm_11 );}}
//--><!]]>
</script>
<script src='https://polldaddy.com/js/rating/rating.js?ver=wpcom' id='crowdsignal-rating-js'></script>
<script id='sharing-js-js-extra'>
var sharing_js_options = {"lang":"en","counts":"1","is_stats_active":"1"};
</script>
<script crossorigin='anonymous' type='text/javascript' src='https://s0.wp.com/wp-content/mu-plugins/post-flair/sharing/sharing.js?m=1611055338h'></script>
<script type='text/javascript'>
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches && el.matches( sel ) ||
						el.msMatchesSelector && el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-facebook' ) ) {
						el = event.target;
					} else if ( event.target.parentNode && matches( event.target.parentNode, 'a.share-facebook' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
						return false;
					}
				} );
			} )();
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches && el.matches( sel ) ||
						el.msMatchesSelector && el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-twitter' ) ) {
						el = event.target;
					} else if ( event.target.parentNode && matches( event.target.parentNode, 'a.share-twitter' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
						return false;
					}
				} );
			} )();
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches && el.matches( sel ) ||
						el.msMatchesSelector && el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-tumblr' ) ) {
						el = event.target;
					} else if ( event.target.parentNode && matches( event.target.parentNode, 'a.share-tumblr' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomtumblr', 'menubar=1,resizable=1,width=450,height=450' );
						return false;
					}
				} );
			} )();
var windowOpen;
			( function () {
				function matches( el, sel ) {
					return !! (
						el.matches && el.matches( sel ) ||
						el.msMatchesSelector && el.msMatchesSelector( sel )
					);
				}

				document.body.addEventListener( 'click', function ( event ) {
					if ( ! event.target ) {
						return;
					}

					var el;
					if ( matches( event.target, 'a.share-linkedin' ) ) {
						el = event.target;
					} else if ( event.target.parentNode && matches( event.target.parentNode, 'a.share-linkedin' ) ) {
						el = event.target.parentNode;
					}

					if ( el ) {
						event.preventDefault();

						// If there's another sharing window open, close it.
						if ( typeof windowOpen !== 'undefined' ) {
							windowOpen.close();
						}
						windowOpen = window.open( el.getAttribute( 'href' ), 'wpcomlinkedin', 'menubar=1,resizable=1,width=580,height=450' );
						return false;
					}
				} );
			} )();
</script>
<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script>	<iframe src='https://widgets.wp.com/likes/master.html?ver=20210831#ver=20210831&amp;origin=https://existentialtype.wordpress.com' scrolling='no' id='likes-master' name='likes-master' style='display:none;'></iframe>
	<div id='likes-other-gravatars'>
		<div class="likes-text">
			<span>%d</span> bloggers like this:		</div>
		<ul class="wpl-avatars sd-like-gravatars"></ul>
	</div>
	
		<script src="//stats.wp.com/w.js?62" defer></script> <script type="text/javascript">
_tkq = window._tkq || [];
_stq = window._stq || [];
_tkq.push(['storeContext', {'blog_id':'2157150','blog_tz':'-5','user_lang':'en','blog_lang':'en','user_id':'0'}]);
_stq.push(['view', {'blog':'2157150','v':'wpcom','tz':'-5','user_id':'0','post':'50','subd':'existentialtype'}]);
_stq.push(['extra', {'crypt':'UE40eW5QN0p8M2Y/RE1mN3FZZmo1ciV5XXJsZ24wUjJacUxGNiVZTFVtXUxpbz8yZFVUTj9jNUg3XVRJPXJ6SSxrPTNWcEI0OUJHa0JXZ1lUeGxvdkJXSWJnR0p3JWl6TENpPU5IUmt2LjBRckc9ZF1YU1s1SUYzSGh5OWgmK0lUbURLZ040fHZWUzNxZy13eHdWZHYreiZwbFBEVmxGWVZiTGhOeWs4Y2NVMW4tLURMMi83bXVnckh1eGxBLDksVUJRSkN0fmljaEp1d0RENiw2X3pjajlkbDM5JTJKbmxCLy0reXRGM1otfDJ2Wix3PW9JYWk4ci5jRWNZbFglSmdtaDNyfH5dcmZPL1NtaFFGRjI/LE9iZzZ5Y20zaGxpfnhxZ1txZ29rdEJEdnFPNjIxUmdrVSZJOA=='}]);
_stq.push([ 'clickTrackerInit', '2157150', '50' ]);
	</script>
<noscript><img src="https://pixel.wp.com/b.gif?v=noscript" style="height:1px;width:1px;overflow:hidden;position:absolute;bottom:1px;" alt="" /></noscript>
<script>
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//pixel.wp.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&baba=' + Math.random();
	}
	
}
</script>
</body>
</html>